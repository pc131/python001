import openpyxl as xl
from openpyxl.styles import PatternFill
import os
from datetime import datetime
import random
import string
import names
import sys
from random_address import real_random_address
from faker import Faker
from faker_biology.mol_biol import Enzyme

#UNCOMMENT FOR LOCAL
working_dir = "C:\\Users\\tomasz.skoczylas\\Downloads\\11\\"

# UNCOMMENT FOR VM
#working_dir = "C:\\Users\\cgi\\Desktop\\_downloads\\11\\"

filename = working_dir + "Bilaterals 1.8.0.1 master.xlsx"
wb1 = xl.load_workbook(filename)
ws11 = wb1.worksheets[0]
ws12 = wb1.worksheets[1]

#SINGLE_SPIDS TEST UAT
SPIDS_METERS = {'3019178819W13':('KENT','000000000000189985'),'3019178827W10':('KENT','4A059235'),'3019178843W15':('KENT','4A026515'),'3019178851W12':('ELSTER','000000000008081344'),'301917886XW1X':('ARAD','152026121'),'3019178991W12':('KENT','000000000000221909'),'3019179017W10':('KENT','4A024157'),'3019179033W15':('KENT','2T021233'),'3019179130W16':('KENT','90P169156'),'3019179149W13':('KENT','3T042349'),'3019179173W15':('ARAD','09044840'),'3019179289W13':('KENT','AE188861'),'301917936XW1X':('KENT','4A023209'),'3019179386W14':('ARAD','16732739'),'3019179416W14':('ARAD','8004476'),'3019179483W15':('AMR','8569517'),'3019179564W11':('ARAD','9103911'),'3019179653W15':('KENT','000000000083235847'),'3019024854W11':('ARAD','9097878'),'3019025117W10':('SW_METER','9M129866'),'3019025125W18':('KENT','2M034061'),'3019025230W16':('KENT','3M310071'),'3019025486W14':('KENT','4M093717'),'3019025532W19':('ARAD','000000000008011122'),'3019025648W17':('ARAD','000000000008596289'),'3019025648W17':('ARAD','000000000008385953'),'3019025737W10':('KENT','4M058479'),'3019026067W10':('KENT','1M079127'),'301902644XW1X':('KENT','000000000090248995'),'3019027314W11':('ARAD','000000000008110959'),'3019027322W19':('KENT','1M202328'),'301902739XW1X':('KENT','000000000087080861'),'3019027691W12':('KENT','000000000085077189'),'3019027780W16':('SW_METER','7M472116'),'3019028310W16':('KENT','94A003592'),'301902840XW1X':('KENT','4A044797'),'3019028574W11':('KENT','5M049422'),'3019179726W14':('KENT','4T024221'),'3019179750W16':('ELSTER','7A165214'),'3019179793W15':('KENT','000000000089116779'),'3019179858W17':('ELSTER','000000000008064363'),'3019179874W11':('KENT','000000000000191037'),'3019179890W16':('ARAD','18AI0248'),'3019179912W19':('ARAD','000000000008295070'),'3019180058W17':('KENT','000000000085179813'),'3019180244W11':('ARAD','09135365'),'3019180309W13':('KENT','000000000082099104'),'3019180368W17':('SCHLUMBERGER','96AQ151103'),'3019180384W11':('ARAD','9135944'),'3019180449W13':('KENT','000000000001489140'),'3019180465W18':('ARAD','9114869'),'3019180902W19':('AQUADIS','96AL002538'),'3019180929W13':('KENT','4T019536'),'3019181127W10':('KENT','1M068999'),'3019181240W16':('KENT','4T033566'),'3019181259W13':('ARAD','000000000008232146'),'3019181313W15':('NEPTUNE_MEASUREMENT','1T024790'),'3019181372W19':('NEPTUNE_MEASUREMENT','93M054980'),'3019181429W13':('SW_METER','9A072507'),'3019181518W17':('KENT','4T025116'),'3019181682W19':('AQUADIS','97PC602000'),'3019181763W15':('ARAD','000000000008280228'),'3019181798W17':('ARAD','8174889'),'3019181860W16':('KENT','4T018841'),'3019181895W18':('FROST','AL022639'),'3019181917W10':('KENT','000000000082089093'),'3019181925W18':('KENT','4T012674'),'3019182085W18':('KENT','3M301521'),'3019182166W14':('ELSTER','000000000008496706'),'3019182174W11':('ARAD','9164269'),'3019182247W10':('SCHLUMBERGER','97AQ268415'),'3019182484W11':('SCHLUMBERGER','96AQ123266'),'3019182506W14':('KENT','2M000061'),'3019182980W16':('KENT','95M186330'),'3019183081W12':('KENT','3M335173'),'301918309XW1X':('ARAD','000000000008017074'),'3019183111W12':('KENT','91M126435'),'3019183227W10':('KENT','6T007525'),'3019183286W14':('KENT','000000000085179921'),'3019183308W17':('KENT','000000000000023101'),'3019183316W14':('ELSTER','12A10363'),'3019183324W11':('KENT','93A023199'),'3019183340W16':('KENT','000000000087164732'),'301918343XW1X':('ELSTER','000000000008093998'),'3019029031W12':('KENT','4T007325'),'3019029058W17':('ELSTER','1M219584'),'3019029147W10':('ARAD','9158366'),'3019029368W17':('ARAD','000000000008378520'),'3019029449W13':('ARAD','000000000008174844'),'3019029457W10':('KENT','93M213479'),'3019029546W14':('KENT','95A138505'),'301903020XW1X':('KENT','4M097305'),'3019030803W15':('KENT','1A161821'),'3019031141W12':('KENT','4M117380'),'3019031214W11':('AQUADIS','98PB300065'),'301903129XW1X':('ELSTER','4M093252'),'3019031559W13':('KENT','95A521326'),'3019031567W10':('KENT','93M154072'),'3019031575W18':('ELSTER','000000000008094716'),'3019031591W12':('ELSTER','000000000008999775'),'3019031621W12':('ARAD','000000000008270804'),'3019031850W16':('KENT','4M097140'),'3019032008W17':('KENT','2M224449'),'3019032377W10':('KENT','4T007843'),'3019032474W11':('SW_METER','4A061558'),'3019183553W15':('SCHLUMBERGER','99WPE05580'),'3019183642W19':('ARAD','000000000008963442'),'3019183693W15':('KENT','94M073927'),'3019183723W15':('KENT','000000000082089069'),'3019183790W16':('KENT','95A517029'),'3019183820W16':('ELSTER','000000000008103182'),'3019183855W18':('KENT','4T016561'),'3019183898W17':('KENT','4A023537'),'3019183952W19':('NA','9045596'),'3019184045W18':('KENT','000000000083103119'),'3019184061W12':('KENT','5A026406'),'301918410XW1X':('KENT','AF518194'),'3019184320W16':('KENT','4M201816'),'3019184363W15':('KENT','4M201366'),'3019184371W12':('KENT','4M117218'),'3019184495W18':('KENT','000000000085134566'),'3019184509W13':('SCHLUMBERGER','96AQ183368'),'3019184525W18':('KENT','94M004196'),'3019184770W16':('ARAD','000000000009050719'),'3019184878W17':('ELSTER','000000000003426633'),'301918522XW1X':('KENT','95M246039'),'3019185297W10':('SCHLUMBERGER','95A131611'),'3019185319W13':('NEPTUNE_MEASUREMENT','000000000091506905'),'3019185661W12':('ARAD','000000000008540387'),'3019185688W17':('ARAD','8219393'),'301903258XW1X':('KENT','93A556059'),'3019032601W12':('SW_METER','8M223846'),'301903261XW1X':('SW_METER','8M473776'),'3019032628W17':('KENT','91P033387'),'301903275XW1X':('ELSTER','000000000012207830'),'3019032938W17':('ARAD','9103768'),'3019032946W14':('ARAD','19AI0097'),'3019032954W11':('ELSTER','9097938'),'3019032997W10':('KENT','PC502819'),'3019033004W11':('KENT','AE183174'),'3019033012W19':('KENT','79011716'),'3019033020W16':('KENT','000000000073225966'),'3019033039W13':('KENT','97A080026'),'3019033047W10':('ARAD','08013499'),'301903308XW1X':('ARAD','000000000008567195'),'3019033101W12':('KENT','AM014229'),'301903311XW1X':('KENT','529791'),'3019033128W17':('KENT','000000000006259797'),'3019033136W14':('ELSTER','10AC017906'),'3019033144W11':('KENT','000000000082099364'),'3019033152W19':('KENT','4A054549'),'3019033160W16':('NEPTUNE_MEASUREMENT','000000000000321187'),'3019033195W18':('ARAD','000000000008584440'),'3019185696W14':('KENT','088174268'),'301918570XW1X':('KENT','AG610576'),'3019185815W18':('NEPTUNE_MEASUREMENT','99AL005090'),'3019185963W15':('KENT','000000000089582490'),'3019186064W11':('ARAD','000000000008360573'),'3019186080W16':('SW_METER','8M086205'),'301918620XW1X':('KENT','000000000073339733'),'3019186218W17':('KENT','4A045367'),'3019186226W14':('ARAD','000000000008581723'),'3019186234W11':('KENT','93A021395'),'3019186250W16':('ELSTER','000000000008217650'),'3019186285W18':('KENT','3M266548'),'3019186315W18':('KENT','93M126286'),'3019186323W15':('KENT','000000000078144637'),'301918634XW1X':('KENT','PC502050'),'3019186366W14':('KENT','000000000078144630'),'3019186374W11':('KENT','000000000079113691'),'3019186412W19':('KENT','000000000080079221'),'3019186439W13':('ARAD','000000000008119893'),'3019186552W19':('KENT','4T012332'),'3019186560W16':('KENT','4A061265'),'3019186587W10':('KENT','4A061268'),'3019186609W13':('KENT','000000000000610563'),'3019186633W15':('ARAD','16286125'),'3019186668W17':('KENT','000000000073339734'),'3019186676W14':('SW_METER','9M174577'),'3019186765W18':('SOCAM','000000000004748629'),'3019186781W12':('ELSTER','000000000008036473'),'3019187192W19':('ELSTER','8M001142'),'301918732XW1X':('SW_METER','7A128306'),'3019187400W16':('KENT','4A029940'),'3019187516W14':('KENT','90P194329'),'3019187524W11':('KENT','4M093692'),'3019187613W15':('ELSTER','000000000008951107'),'3019187729W13':('SW_METER','8A026502'),'301918777XW1X':('KENT','4A061242'),'3019187850W16':('KENT','93A579245'),'3019187907W10':('KENT','000000000073279189'),'3019188059W13':('ELSTER','000000000008092307'),'3019188105W18':('KENT','4A022348'),'3019188172W19':('ARAD','9116984'),'3019188202W19':('KENT','AG610567'),'3019188245W18':('ABB','G/09289/1/1'),'3019188253W15':('KENT','4A072078'),'3019188296W14':('ARAD','8189888'),'3019188334W11':('KENT','4T013708'),'3019188385W18':('KENT','92M047166'),'3019188458W17':('SW_METER','8M088276'),'3019188466W14':('KENT','M210093'),'3019188490W16':('KENT','6A048505'),'3019188512W19':('KENT','000000000000405089'),'3019033276W14':('ARAD','9089368'),'3019033306W14':('KENT','4T009453'),'3019033322W19':('ELSTER','000000000009080130'),'3019033330W16':('ELSTER','000000000008288295'),'3019033373W15':('ARAD','9108738'),'3019033381W12':('KENT','000000000073260854'),'3019033411W12':('SW_METER','9M129985'),'301903342XW1X':('KENT','AL034255'),'3019033438W17':('NEPTUNE_MEASUREMENT','368175'),'3019033462W19':('KENT','4A052252'),'3019033500W16':('KENT','4T015998'),'3019033535W18':('KENT','4A022358'),'3019033578W17':('KENT','86027961'),'3019033594W11':('KENT','4A022325'),'3019033624W11':('KENT','000000000073261507'),'3019033632W19':('KENT','000000000082099358'),'3019033659W13':('ARAD','9124697'),'3019033667W10':('KENT','000000000088457019'),'3019033721W12':('KENT','000000000000638354'),'301903373XW1X':('KENT','3M060812'),'3019033829W13':('KENT','4A023413'),'3019033837W10':('SW_METER','8T000006'),'3019033845W18':('KENT','3A246396'),'3019033853W15':('KENT','000000000008507331'),'3019033888W17':('ARAD','9120052'),'3019033926W14':('SW_METER','14AI0081'),'3019123186W14':('KENT','87148248'),'3019123194W11':('ELSTER','000000000008360024'),'3019123275W18':('ARAD','000000000008536005'),'3019123364W11':('SCHLUMBERGER','96AQ133204'),'3019123453W15':('ELSTER','10A033112'),'3019123518W17':('KENT','4T025198'),'3019123607W10':('SW_METER','9A081604'),'301912364XW1X':('ARAD','9417713'),'3019123682W19':('KENT','000000000072165998'),'3019123704W11':('KENT','3M158669'),'3019123917W10':('KENT','000000000078149353'),'3019123925W18':('KENT','000000000082096204'),'3019123933W15':('ARAD','8188202'),'3019123968W17':('ARAD','000000000009063868'),'3019124034W11':('KENT','000000000082089101'),'3019124050W16':('KENT','3M158614'),'3019124093W15':('ELSTER','8123500'),'3019124158W17':('KENT','5M045270'),'3019124174W11':('SCHLUMBERGER','99AQ448419'),'3019124190W16':('KENT','4T024226'),'3019124263W15':('SCHLUMBERGER','96AQ138070'),'3019124271W12':('KENT','3M073842'),'3019124328W17':('KENT','4T008475'),'3019124409W13':('ELSTER','000000000008189180'),'3019124417W10':('ELSTER','000000000008034615'),'3019124425W18':('KENT','000000000082089158'),'3019124433W15':('KENT','4T009051'),'3019391148W17':('ARAD','000000000008075195'),'3019391407W10':('KENT','4M097120'),'3019391849W13':('KENT','4T012147'),'301939189XW1X':('SCHLUMBERGER','99PB401460'),'3019391938W17':('KENT','5M370619'),'3019392500W16':('ARAD','9118075'),'301939273XW1X':('ARAD','09089691'),'301939287XW1X':('KENT','4M060742'),'3019393213W15':('SEVERN_TRENT_(ELECTRONIC)','000000000000000072'),'3019393221W12':('KENT','5M006818'),'301939323XW1X':('ARAD','09141412'),'3019393280W16':('KENT','88073486'),'3019393396W14':('KENT','4T014731'),'3019393639W13':('KENT','2M002958'),'3019394007W10':('KENT','4A072064'),'3019394090W16':('KENT','4A219373'),'3019394139W13':('KENT','4M261957'),'3019394147W10':('KENT','5M020001'),'3019394171W12':('KENT','4A071623'),'3019394309W13':('KENT','4A052357'),'3019394481W12':('KENT','4T041981'),'3019394716W14':('KENT','6M145886'),'3019394724W11':('KENT','2M074007'),'3019394759W13':('SCHLUMBERGER','99AQ503224'),'3019394805W18':('KENT','6M294789'),'3019394902W19':('KENT','4A052265'),'3019394953W15':('KENT','4T031858'),'3019394961W12':('KENT','4A052354'),'3019395267W10':('KENT','90P57308'),'3019395291W12':('KENT','1M243814'),'3019395321W12':('ARAD','09416996'),'3019395364W11':('KENT','4A023500'),'3019395429W13':('KENT','4M346891'),'301939550XW1X':('ARAD','16732862'),'3019395550W16':('ARAD','9104838'),'3019395593W15':('SCHLUMBERGER','AL022619'),'3019395615W18':('ARAD','9147350'),'3019395852W19':('KENT','9106312'),'3019395976W14':('ARAD','9161215'),'3019396026W14':('KENT','2A156701'),'3019396115W18':('KENT','000000000000525071')}
SWG_SPIDS_METERS = {'3019601851S1X':('Elster','88025763'),'3019601916S11':('Elster','93A015953'),'3019602009S10':('Elster','93A614270'),'3019602734S19':('Elster','COWDRAYHALL'),'3019607736S11':('ZENNER','4.220703'),'3019614767S18':('NWM','10/089263'),'301964108XS17':('PortsmouthWater','1800145069999'),'3019643848S14':('ELSTER','14163329'),'3019644402S16':('Elster','CP3152181945'),'3019648947S18':('Elster','A815013'),'3019650909S10':('KENT','81011123'),'3019669766S11':('ELSTER','2345942'),'3019670136S11':('ELSTER','13-40040803'),'3200061251S1X':('SIEMENS','N1F2250089'),'3200061375S15':('ABB','G/17619/2/1'),'3200061448S14':('SIEMENS','469002H036'),'3200061464S19':('ABB','244813121X001'),'3200061510S13':('SIEMENS','7ME69201AA101AA0'),'3200061545S15':('ENDRESS_AND_HAUSER','S6257905'),'3200061588S14':('ELSTER','10S01131151428'),'320006160XS17':('ARAD','M10765299'),'3200061685S15':('SIEMANS','NIE4099400'),'3200061782S16':('SIEMENS','450702H425'),'3200061812S16':('SIEMENS','252002H164'),'3200061847S18':('ABB','V/29714/3/1'),'3200061928S14':('SIEMENS','194502H524'),'3200062312S16':('ELSTER','10S01141641343'),'320006238XS17':('ELSTER','10S01141751319'),'3200062401S1X':('ELSTER','10S01141806328'),'3200062444S19':('ELSTER','10S01141835553'),'320007325XS17':('ACTARIS','03PE009399'),'3200073284S19':('UNKNOWN','10-068405'),'320007342XS17':('UNKNOWN','SWASN0017'),'3200075449S10':('ELSTER','10S02111341409'),'320007549XS17':('ELSTER','10S02111352072'),'3200098228S14':('ELSTER','10S02241846219'),'3200098430S13':('ELSTER','10S02251337215'),'3200134704S19':('SISMA','09-411847'),'3200134836S11':('B_METERS','997236-13'),'3200142960S13':('ELSTER','10S03251331012'),'3200143029S10':('ELSTER','10S03251341168'),'3200143177S18':('ELSTER','10S03251620521'),'3200143185S15':('ELSTER','10S03251626041'),'3200173254S19':('ELSTER','10S04090821055'),'320020561XS17':('ELSTER','10S05271110590'),'3200205717S18':('ELSTER','10S05271210481'),'3200205733S12':('ELSTER','10S05271222087'),'3200205792S16':('ELSTER','10S05271311144'),'3200205814S19':('ELSTER','10S05271320573'),'3200255358S14':('ELSTER','10S07010721244'),'320025548XS17':('ELSTER','10S07010821023'),'3200255501S1X':('ELSTER','10S07010832209'),'3200272473S12':('ELSTER','10S07271006426'),'3200325224S19':('ELSTER','10S09301110553'),'3200325305S15':('ELSTER','10S09301146096'),'3200347457S18':('ALTONIC','17-149767'),'320034783XS17':('ELSTER','10S10201136284'),'3200348291S1X':('ELSTER','10S10201230558'),'3200348348S14':('ELSTER','10S10201256194'),'3200349360S13':('ELSTER','10S10211041219'),'3200349468S14':('ELSTER','10S10211146048'),'3200741783S12':('ELSTERR','6068807')}

#2WSL_2RTL TEST UAT
#SPIDS_METERS = {'3200643021W12':('ELSTER','08019965'),'3200647175W18':('ELSTER','10W10270746134'),'320065323XW1X':('KENT','92A588101'),'3200663693W15':('ELSTER','06M294533'),'3200675837W10':('ARAD','9129186'),'3200681691W12':('ELSTER','4A064322'),'3200719893W15':('ARAD','9132435'),'3200720123W15':('ARAD','9140801'),'320072031XW1X':('ARAD','9139171'),'3200727020W16':('ARAD','9131614'),'3200751924W11':('ARAD','16287021'),'320076144XW1X':('ARAD','9149113'),'3200767723W15':('ELSTER','AM076399'),'3200768703W15':('Elster','4T006734'),'3200772247W10':('SW_METER','7T020818'),'3200772344W11':('KENT','2A198645'),'3200795069W13':('ARAD','9157122'),'3200795700W16':('ARAD','9153721'),'3200795824W11':('ARAD','16284757'),'3200795956W14':('ARAD','16284749'),'3200796227W10':('ARAD','16735108'),'320080758XW1X':('ARAD','9153952'),'3200808098W17':('ARAD','16287218'),'320081974XW1X':('ELSTER','8994469'),'320082252XW1X':('ARAD','9157217'),'3200832975W18':('ELSTER','9045272'),'3200854618W17':('ARAD','9134010'),'3200858052W19':('TAGUS','13A10338'),'3200882530W16':('ARAD','9163543'),'3200887478W17':('ARAD','09150547'),'320090190XW1X':('ARAD','9160017'),'3200908998W17':('ARAD','17A0001122'),'3200914556W14':('ARAD','9317073'),'3200914645W18':('ARAD','9412020'),'3200921196W14':('SW_METER','8M097098'),'3200924446W14':('ARAD','9164296'),'3200925795W18':('ARAD','9315201'),'3200930713W15':('ARAD','9156780'),'3200937726W14':('ARAD','9511653'),'3200946997W10':('Elster','82089120'),'3200951575W18':('ARAD','9416836'),'3200966254W11':('ARAD','9161998'),'3201012467W10':('ARAD','9133188'),'3201014737W10':('ARAD','9155967'),'3201033294W11':('ARAD','8554218'),'320104721XW1X':('ARAD','9416445'),'3201047260W16':('ARAD','9414050'),'3201050164W11':('ARAD','9510449'),'3201052868W17':('ARAD','20MS000335'),'3201061018W17':('ARAD','08966422')}

#SINGLE_SPIDS ASSURANCE 2022-07-05
#SPIDS_METERS = {'3200205725W18':('ELSTER','10W05271221493'),'3200205768W17':('ELSTER','10W05271251052'),'3200205768W17':('ELSTER','10W05271251110'),'3200255129W13':('ELSTER','10W07010442137'),'3200255234W11':('ELSTER','10W07010550556'),'3200255331W12':('ELSTER','10W07010716294'),'3200255331W12':('ELSTER','10W07010722006'),'3200255331W12':('ELSTER','10W07010722031'),'3200255331W12':('ELSTER','10W07010722073'),'3200255331W12':('ELSTER','10W07010722104'),'3200255331W12':('ELSTER','10W07010722169'),'3200255455W18':('ELSTER','10W07010816204'),'3200255463W15':('astar','20170701a'),'3200255463W15':('ELSTER','20170701mi'),'3200255498W17':('ELSTER','10W07010826253'),'3200255498W17':('ELSTER','10W07010831478'),'3200255498W17':('ELSTER','10W07010831491'),'3200255498W17':('ELSTER','10W07010831516'),'3200255498W17':('ELSTER','10W07010831529'),'3200255498W17':('ELSTER','10W07010831581'),'3200272465W18':('ELSTER','10W07271002164'),'3200325216W14':('ELSTER','10W09301106187'),'3200325291W12':('ELSTER','10W09301147156'),'3200325291W12':('ELSTER','10W09301146504'),'3200325291W12':('ELSTER','10X09301146185'),'3200325291W12':('ELSTER','10X09301146171')}
#SWG_SPIDS_METERS = {'3200060441S1X':('ELSTER','10S01121911028'),'3200060476S11':('ELSTER','10S01122211259'),'3200060522S16':('ELSTER','10S01122301077'),'3200060565S15':('ELSTER','10S01122326092'),'3200060603S12':('ELSTER','10S01122356187'),'3200060638S14':('ELSTER','10S01130016103'),'3200060670S13':('ELSTER','10S01130026276'),'3200060743S12':('ELSTER','10S01130046122'),'3200061588S14':('ELSTER','10S01131151428'),'3200062312S16':('ELSTER','10S01141641343'),'320006238XS17':('ELSTER','10S01141751319'),'3200062401S1X':('ELSTER','10S01141806328'),'3200062444S19':('ELSTER','10S01141835553'),'3200075392S16':('ELSTER','10S02111301100'),'3200075449S10':('ELSTER','10S02111341409'),'320007549XS17':('ELSTER','10S02111352072'),'3200098147S18':('ELSTER','10S02241613379'),'3200098228S14':('ELSTER','10S02241846219'),'3200098430S13':('ELSTER','10S02251337215'),'3200142960S13':('ELSTER','10S03251331012'),'3200143029S10':('ELSTER','10S03251341168'),'3200143177S18':('ELSTER','10S03251620521'),'3200143185S15':('ELSTER','10S03251626041'),'3200173254S19':('ELSTER','10S04090821055'),'320020561XS17':('ELSTER','10S05271110590'),'3200205717S18':('ELSTER','10S05271210481'),'3200205733S12':('ELSTER','10S05271222087'),'3200205792S16':('ELSTER','10S05271311144'),'3200205814S19':('ELSTER','10S05271320573'),'3200255358S14':('ELSTER','10S07010721244'),'320025548XS17':('ELSTER','10S07010821023'),'3200255501S1X':('ELSTER','10S07010832209'),'3200272473S12':('ELSTER','10S07271006426'),'3200325224S19':('ELSTER','10S09301110553'),'3200325305S15':('ELSTER','10S09301146096'),'3200347503S12':('ELSTER','10S10200941275'),'320034783XS17':('ELSTER','10S10201136284'),'3200348291S1X':('ELSTER','10S10201230558'),'3200348348S14':('ELSTER','10S10201256194'),'3200348399S10':('ELSTER','10S10201336073')}

#2WSL_2RTL ASSURANCE 2022-07-05
#SPIDS_METERS = {'3200399597W10':('ELSTER','10W12020906334'),'3200399600W16':('ELSTER','10W12020916250'),'3200399619W13':('ELSTER','10W12021155562'),'3200399619W13':('ELSTER','10W12021200598'),'3200399619W13':('ELSTER','10W12021201044'),'3200399619W13':('ELSTER','10W12021201092'),'3200399635W18':('ELSTER','10W12021216156'),'3200542845W18':('ELSTER','18A20180518b'),'3200543795W18':('ELSTER','18A20180519a'),'3200543833W15':('ELSTER','10W05191031159')}
TEST_CASE_TRANSACTIONS =  ['T321.W','T201.W','T322.W','T208.R']

TRX_DATA_TEMS_COUNT = {'T201.W':'2','T202.W':'4','T203.W':'3','T204.R':'2','T205.W':'4','T206.W':'3','T207.R':'2','T207.W':'2','T208.R':'2','T210.R':'3','T211.R':'3','T211.W':'3','T212.W':'2','T213.W':'5','T214.W':'3','T215.R':'5','T215.W':'5','T216.R':'2','T216.W':'2','T217.W':'4','T218.R':'25','T220.W':'2','T221.R':'2','T222.W':'9','T223.W':'26','T224.W':'3','T225.R':'4','T225.W':'4','T226.W':'3','T227.R':'2','T228.R':'2','T321.R':'133','T321.W':'110','T322.W':'91','T323.W':'7','T324.R':'2','T325.R':'2','T331.W':'24','T332.W':'29','T335.R':'76','T336.W':'64','T341.R':'102','T341.W':'79','T342.W':'11','T351.R':'53','T351.W':'30','T352.W':'29','T353.R':'42','T355.R':'48','T355.W':'25','T356.W':'12','T357.W':'28','T365.R':'51','T501.R':'35','T501.W':'12','T505.R':'31','T505.W':'8','T551.R':'30','T551.W':'7','T555.R':'39','T555.W':'16','T556.R':'50','T556.W':'28','T557.W':'5','T561.R':'44','T561.W':'21','T562.R':'57','T562.W':'34','T563.W':'5', 'T601.R':'82', 'T601.W':'60', 'T602.W':'18'}

RETAILER = 'MOSLTEST-R'
WHOLESALER = 'MOSLTEST-W'
T216_URL = 'https://moservicesdev.mosl.co.uk/test/attachments/87ffc85e-ebd5-461c-99d6-2ac3eef43f7c'

POSTCODES = ['B1 1HQ', 'BN88 1AH', 'BS98 1TL', 'BX1 1LT', 'BX2 1LB', 'BX3 2BB', 'BX4 7SB', 'BX5 5AT', 'CF10 1BH', 'CF99 1NA', 'CO4 3SQ', 'CV4 8UW', 'CV35 0DB', 'E14 5EY', 'DA1 1RT', 'DE99 3GG', 'DE55 4SW', 'DH98 1BT', 'DH99 1NS', 'E14 5HQ', 'E14 5JP', 'E16 1XL', 'E20 2AQ', 'E20 2BB', 'E20 2ST', 'E20 3BS', 'E20 3EL', 'E20 3ET', 'E20 3HB', 'E20 3HY', 'E98 1SN', 'E98 1ST', 'E98 1TT', 'EC2N 2DB', 'EC4Y 0HQ', 'EH12 1HQ', 'EH99 1SP', 'G58 1SB', 'GIR 0AA', 'IV21 2LR', 'L30 4GB', 'LS98 1FD', 'M50 2BH', 'M50 2QH', 'N1 9G', 'N81 1ER', 'NE1 4ST', 'NG80 1EH', 'NG80 1LH', 'NG80 1RH', 'NG80 1TH', 'PH1 5RB', 'PH1 2SJ', 'S2 4SU	', 'S6 1SW', 'S14 7UP', 'SE1 0NE', 'SE1 8UJ', 'SM6 0HB', 'SN38 1NW', 'SR5 1SU', 'SW1A 0AA', 'SW1A 0PW', 'SW1A 1AA', 'SW1A 2AA', 'SW1A 2AB', 'SW1H 0TL', 'SW1P 3EU', 'SW1W 0DT', 'SW11 7US', 'SW19 5AE', 'TW8 9GS', 'W1A 1AA', 'W1D 4FA', 'W1N 4DJ', 'W1T 1FB']

### MAKE SURE THERE IS THE SAME NUMBER AND THE SAME ORDER OF ELEMENTS IN PROCESSES AND PROC_NAMES ###
PROCESSES = [
    'B1R', 
    'B3R', 
    'B3W', 
    'B5R', 
    'B5W', 
    'B7R', 
    'C1R', 
    'C1W', 
    'C2', 
    'C3', 
    'C5R', 
    'C5W', 
    'F4R', 
    'F4W', 
    'F5R', 
    'F5W', 
    'G1R', 
    'G1W', 
    'G2AR', 
    'G2AW', 
    'G2BR', 
    'G2BW',
    'H1R',
    'H1W'
    ]

### MAKE SURE THERE IS THE SAME NUMBER AND THE SAME ORDER OF ELEMENTS IN PROCESSES AND PROC_NAMES ###
PROC_NAMES = {
    'B1R':'Request Meter Install Work', 
    'B3R':'Request Meter Accuracy Test', 
    'B3W':'Request Meter Accuracy Test', 
    'B5R':'Request Meter Repair Replacement Work', 
    'B5W':'Request Meter Repair Replacement Work', 
    'B7R':'Request Meter Change', 
    'C1R':'Request Meter And Supply Arrangement Verification', 
    'C1W':'Request Meter And Supply Arrangement Verification', 
    'C2': 'Submit Gap Site Application For C2', 
    'C3': 'Submit Gap Site Application For C3', 
    'C5R': 'Submit Application For SPID Deregistration Or SC Removal', 
    'C5W': 'Submit Application For SPID Deregistration Or SC Removal',
    'F4R':'Submit Non-Household Customer Enquiry', 
    'F4W':'Submit Non-Household Customer Enquiry', 
    'F5R':'Submit Non-Household Customer Complaint', 
    'F5W':'Submit Non-Household Customer Complaint', 
    'G1R':'Submit Non-Household Customer TE Enquiry', 
    'G1W':'Submit Non-Household Customer TE Enquiry', 
    'G2AR':'Submit TE Consent Application With SPID', 
    'G2AW':'Submit TE Consent Application With SPID', 
    'G2BR':'Submit TE Consent Application Without SPID', 
    'G2BW':'Submit TE Consent Application Without SPID',
    'H1R':'Submit Application For An Allowance Or Volumetric Adjustment',
    'H1W':'Submit Application For An Allowance Or Volumetric Adjustment'
    }

TRANSACTION_NAMES = {
    'T201.W':'Accept Service Request', 
    'T202.W':'Reject Service Request', 
    'T203.W':'Request For Additional Information', 
    'T204.R':'Provide Additional Information', 
    'T205.W':'Update Site Visit Date', 
    'T206.W':'Update Site Visit Failure', 
    'T207.R':'Submit Trading Party Comments', 
    'T207.W':'Submit Trading Party Comments', 
    'T208.R':'Close Service Request', 
    'T210.R':'Resubmit Service Request', 
    'T211.R':'Cancel Service Request', 
    'T211.W':'Cancel Service Request', 
    'T212.W':'Visit Complete And Preparing Plan', 
    'T213.W':'Start Service Request Deferral', 
    'T214.W':'End Service Request Deferral', 
    'T215.R':'Provide Attachment', 
    'T215.W':'Provide Attachment', 
    'T216.R':'Request Attachment', 
    'T216.W':'Request Attachment', 
    'T217.W':'Request For Customer Details and Additional Information', 
    'T218.R':'Provide Customer Details and Additional Information', 
    'T220.W':'Provide Quote For Non Standard Activity', 
    'T221.R':'Accept Quote For Non Standard Activity', 
    'T222.W':'Advise Service Request Complete', 
    'T223.W':'Advise Meter Work Completion', 
    'T224.W':'Advise Process Delay', 
    'T225.R':'Advise Incorrect TP Selected For Service Request', 
    'T226.W':'Propose Outcome', 
    'T227.R':'Agree Proposed Outcome', 
    'T228.R':'Proposed Outcome Not Agreed', 
    'T321.R':'Request Meter And Supply Arrangement Verification', 
    'T321.W':'Request Meter And Supply Arrangement Verification', 
    'T322.W':'Update Corrections Complete for C1', 
    'T323.W':'Propose Corrections Plan for C1', 
    'T324.R':'Agree Proposed Corrections Plan for C1', 
    'T331.W':'Submit Gap Site Application For C2', 
    'T332.W':'Advise Gap Site Application Outcome For C2', 
    'T335.R':'Submit Gap Site Application For C3', 
    'T336.W':'Advise Gap Site Application Outcome For C3', 
    'T325.R':'Dispute Proposed Corrections Plan for C1', 
    'T341.R':'Submit Application For SPID Deregistration Or SC Removal', 
    'T341.W':'Submit Application For SPID Deregistration Or SC Removal', 
    'T342.W':'Advise Application Outcome For C5', 
    'T351.R':'Request Meter Repair Replacement Work', 
    'T351.W':'Request Meter Repair Replacement Work', 
    'T352.W':'Advise Meter Repair Replacement Work Completion', 
    'T353.R':'Request Meter Install Work', 
    'T355.R':'Request Meter Accuracy Test', 
    'T355.W':'Request Meter Accuracy Test', 
    'T356.W':'Advise Meter Accuracy Test Complete', 
    'T357.W':'Awaiting Meter Accuracy Test', 
    'T365.R':'Request Meter Change', 
    'T501.R':'Submit Non Household Customer Complaint', 
    'T501.W':'Submit Non Household Customer Complaint', 
    'T505.R':'Submit Non Household Customer Enquiry', 
    'T505.W':'Submit Non Household Customer Enquiry', 
    'T551.R':'Submit Non Household Customer TE Enquiry', 
    'T551.W':'Submit Non Household Customer TE Enquiry', 
    'T561.R':'Submit TE Consent Application With SPID', 
    'T561.W':'Submit TE Consent Application With SPID', 
    'T562.R':'Submit TE Consent Application Without SPID', 
    'T562.W':'Submit TE Consent Application Without SPID', 
    'T563.W':'Advise TE Consent Application Outcome',
    'T601.R':'Submit Application For Volumetric Allowance',
    'T601.W':'Submit Application For Volumetric Allowance',
    'T602.W':'Advise Application Outcome for H1'
}

SUBMITTING_TRANSACTIONS = { 'T321.R', 'T321.W', 'T331.W', 'T335.R', 'T341.R', 'T341.W', 'T351.R', 'T351.W', 'T353.R', 'T355.R', 'T355.W', 'T365.R', 'T501.R', 'T501.W', 'T505.R', 'T505.W', 'T551.R', 'T551.W', 'T561.R', 'T561.W', 'T562.R', 'T562.W', 'T601.R', 'T601.W'}

C1R_TRANSACTIONS = ['T321.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T212.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T322.W', 'T323.W', 'T324.R', 'T325.R']
C1R_T201W_allowed = ['T203.W', 'T205.W', 'T322.W', 'T323.W']
C1R_T202W_allowed = ['T210.R']
C1R_T203W_allowed = ['T204.R']
C1R_T204R_allowed = ['T203.W', 'T205.W', 'T322.W', 'T323.W']
C1R_T205W_allowed = ['T206.W', 'T212.W', 'T322.W', 'T323.W']
C1R_T206W_allowed = ['T203.W', 'T205.W']
C1R_T210R_allowed = ['T201.W', 'T202.W']
C1R_T212W_allowed = ['T203.W', 'T323.W']
C1R_T321R_allowed = ['T201.W', 'T202.W']
C1R_T322W_allowed = ['T208.R', 'T210.R']
C1R_T323W_allowed = ['T324.R', 'T325.R']
C1R_T324R_allowed = ['T203.W', 'T205.W', 'T322.W']
C1R_T325R_allowed = ['T203.W', 'T323.W']

C1W_TRANSACTIONS = ['T321.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T212.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T322.W', 'T323.W', 'T324.R', 'T325.R']
C1W_T201W_allowed = ['T217.W', 'T205.W', 'T322.W', 'T323.W']
C1W_T202W_allowed = ['T210.R']
C1W_T217W_allowed = ['T218.R']
C1W_T218R_allowed = ['T217.W', 'T205.W', 'T322.W', 'T323.W']
C1W_T205W_allowed = ['T206.W', 'T212.W', 'T322.W', 'T323.W']
C1W_T206W_allowed = ['T217.W', 'T205.W']
C1W_T210R_allowed = ['T201.W', 'T202.W']
C1W_T212W_allowed = ['T217.W', 'T323.W']
C1W_T321W_allowed = ['T201.W']
C1W_T322W_allowed = ['T208.R', 'T210.R']
C1W_T323W_allowed = ['T324.R', 'T325.R']
C1W_T324R_allowed = ['T217.W', 'T205.W', 'T322.W']
C1W_T325R_allowed = ['T217.W', 'T323.W']

B5R_TRANSACTIONS = ['T351.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T352.W']
B5R_T201W_allowed = ['T203.W', 'T205.W', 'T224.W', 'T352.W']
B5R_T202W_allowed = ['T210.R']
B5R_T203W_allowed = ['T204.R']
B5R_T204R_allowed = ['T203.W', 'T205.W', 'T224.W', 'T352.W']
B5R_T205W_allowed = ['T206.W', 'T224.W', 'T352.W']
B5R_T206W_allowed = ['T203.W', 'T205.W']
B5R_T210R_allowed = ['T201.W', 'T202.W']
B5R_T224W_allowed = ['T203.W', 'T205.W', 'T352.W']
B5R_T351R_allowed = ['T201.W', 'T202.W']
B5R_T352W_allowed = ['T208.R', 'T210.R']

B5W_TRANSACTIONS = ['T351.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T352.W']
B5W_T201W_allowed = ['T217.W', 'T205.W', 'T224.W', 'T352.W']
B5W_T202W_allowed = ['T210.R']
B5W_T217W_allowed = ['T218.R']
B5W_T218R_allowed = ['T217.W', 'T205.W', 'T224.W', 'T352.W']
B5W_T205W_allowed = ['T206.W', 'T224.W', 'T352.W']
B5W_T206W_allowed = ['T217.W', 'T205.W']
B5W_T210R_allowed = ['T201.W', 'T202.W']
B5W_T224W_allowed = ['T217.W', 'T205.W', 'T352.W']
B5W_T351W_allowed = ['T201.W']
B5W_T352W_allowed = ['T208.R', 'T210.R']

B1R_TRANSACTIONS = ['T353.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T220.W', 'T221.R', 'T224.W', 'T223.W']
B1R_T353R_allowed = ['T201.W', 'T202.W']
B1R_T201W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T223.W']
B1R_T202W_allowed = ['T210.R']
B1R_T203W_allowed = ['T204.R']
B1R_T204R_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T223.W']
B1R_T205W_allowed = ['T206.W', 'T220.W', 'T224.W', 'T223.W']
B1R_T206W_allowed = ['T203.W', 'T205.W']
B1R_T210R_allowed = ['T201.W', 'T202.W']
B1R_T220W_allowed = ['T210.R', 'T221.R']
B1R_T221R_allowed = ['T205.W', 'T224.W', 'T223.W']
B1R_T224W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T223.W']
B1R_T223W_allowed = ['T208.R', 'T210.R']

B3R_TRANSACTIONS = ['T355.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T220.W', 'T221.R', 'T224.W', 'T356.W', 'T357.W']
B3R_T355R_allowed = ['T201.W', 'T202.W']
B3R_T201W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T356.W']
B3R_T202W_allowed = ['T210.R']
B3R_T203W_allowed = ['T204.R']
B3R_T204R_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T356.W']
B3R_T205W_allowed = ['T206.W', 'T220.W', 'T224.W', 'T357.W', 'T356.W']
B3R_T206W_allowed = ['T203.W', 'T205.W']
B3R_T210R_allowed = ['T201.W', 'T202.W']
B3R_T220W_allowed = ['T210.R', 'T221.R']
B3R_T221R_allowed = ['T205.W', 'T224.W', 'T356.W']
B3R_T224W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T356.W']
B3R_T357W_allowed = ['T356.W']
B3R_T356W_allowed = ['T208.R', 'T210.R']

B3W_TRANSACTIONS = ['T355.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T220.W', 'T221.R', 'T224.W', 'T356.W', 'T357.W']
B3W_T355W_allowed = ['T201.W']
B3W_T201W_allowed = ['T217.W', 'T205.W', 'T220.W', 'T224.W', 'T356.W']
B3W_T202W_allowed = ['T210.R']
B3W_T217W_allowed = ['T218.R']
B3W_T218R_allowed = ['T217.W', 'T205.W', 'T220.W', 'T224.W', 'T356.W']
B3W_T205W_allowed = ['T206.W', 'T220.W', 'T224.W', 'T357.W', 'T356.W']
B3W_T206W_allowed = ['T217.W', 'T205.W']
B3W_T210R_allowed = ['T201.W', 'T202.W']
B3W_T220W_allowed = ['T210.R', 'T221.R']
B3W_T221R_allowed = ['T205.W', 'T224.W', 'T356.W']
B3W_T224W_allowed = ['T217.W', 'T205.W', 'T220.W', 'T356.W']
B3W_T357W_allowed = ['T356.W']
B3W_T356W_allowed = ['T208.R', 'T210.R']

B7R_TRANSACTIONS = ['T365.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T220.W', 'T221.R', 'T224.W', 'T223.W']
B7R_T365R_allowed = ['T201.W', 'T202.W']
B7R_T201W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T223.W']
B7R_T202W_allowed = ['T210.R']
B7R_T203W_allowed = ['T204.R']
B7R_T204R_allowed = ['T203.W', 'T205.W', 'T220.W', 'T224.W', 'T223.W']
B7R_T205W_allowed = ['T206.W', 'T220.W', 'T224.W', 'T223.W']
B7R_T206W_allowed = ['T203.W', 'T205.W']
B7R_T210R_allowed = ['T201.W', 'T202.W']
B7R_T220W_allowed = ['T210.R', 'T221.R']
B7R_T221R_allowed = ['T205.W', 'T224.W', 'T223.W']
B7R_T224W_allowed = ['T203.W', 'T205.W', 'T220.W', 'T223.W']
B7R_T223W_allowed = ['T208.R', 'T210.R']

F4R_TRANSACTIONS = ['T505.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
F4R_T505R_allowed = ['T201.W', 'T202.W']
F4R_T201W_allowed = ['T203.W', 'T222.W']
F4R_T202W_allowed = ['T210.R']
F4R_T203W_allowed = ['T204.R']
F4R_T204R_allowed = ['T203.W', 'T222.W']
F4R_T210R_allowed = ['T201.W', 'T202.W']
F4R_T222W_allowed = ['T208.R', 'T210.R']

F4W_TRANSACTIONS = ['T505.W', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
F4W_T505W_allowed = ['T201.W']
F4W_T201W_allowed = ['T217.W', 'T222.W']
F4W_T202W_allowed = ['T210.R']
F4W_T217W_allowed = ['T218.R']
F4W_T218R_allowed = ['T217.W', 'T222.W']
F4W_T210R_allowed = ['T201.W', 'T202.W']
F4W_T222W_allowed = ['T208.R', 'T210.R']

F5R_TRANSACTIONS = ['T501.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
F5R_T501R_allowed = ['T201.W', 'T202.W']
F5R_T201W_allowed = ['T203.W', 'T222.W']
F5R_T202W_allowed = ['T210.R']
F5R_T203W_allowed = ['T204.R']
F5R_T204R_allowed = ['T203.W', 'T222.W']
F5R_T210R_allowed = ['T201.W', 'T202.W']
F5R_T222W_allowed = ['T208.R', 'T210.R']

F5W_TRANSACTIONS = ['T501.W', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
F5W_T501W_allowed = ['T201.W']
F5W_T201W_allowed = ['T217.W', 'T222.W']
F5W_T202W_allowed = ['T210.R']
F5W_T217W_allowed = ['T218.R']
F5W_T218R_allowed = ['T217.W', 'T222.W']
F5W_T210R_allowed = ['T201.W', 'T202.W']
F5W_T222W_allowed = ['T208.R', 'T210.R']

G1R_TRANSACTIONS = ['T551.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
G1R_T551R_allowed = ['T201.W', 'T202.W']
G1R_T201W_allowed = ['T203.W', 'T222.W']
G1R_T202W_allowed = ['T210.R']
G1R_T203W_allowed = ['T204.R']
G1R_T204R_allowed = ['T203.W', 'T222.W']
G1R_T210R_allowed = ['T201.W', 'T202.W']
G1R_T222W_allowed = ['T208.R', 'T210.R']

G1W_TRANSACTIONS = ['T551.W', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T222.W']
G1W_T551W_allowed = ['T201.W']
G1W_T201W_allowed = ['T217.W', 'T222.W']
G1W_T202W_allowed = ['T210.R']
G1W_T217W_allowed = ['T218.R']
G1W_T218R_allowed = ['T217.W', 'T222.W']
G1W_T210R_allowed = ['T201.W', 'T202.W']
G1W_T222W_allowed = ['T208.R', 'T210.R']

G2AR_TRANSACTIONS = ['T561.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W','T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T563.W']
G2AR_T201W_allowed = ['T203.W', 'T205.W', 'T224.W', 'T563.W']
G2AR_T202W_allowed = ['T210.R']
G2AR_T203W_allowed = ['T204.R']
G2AR_T204R_allowed = ['T203.W', 'T205.W', 'T224.W', 'T563.W']
G2AR_T205W_allowed = ['T206.W', 'T224.W', 'T563.W']
G2AR_T206W_allowed = ['T203.W', 'T205.W']
G2AR_T210R_allowed = ['T201.W', 'T202.W']
G2AR_T224W_allowed = ['T203.W', 'T205.W', 'T563.W']
G2AR_T561R_allowed = ['T201.W', 'T202.W']
G2AR_T563W_allowed = ['T208.R', 'T210.R']

G2AW_TRANSACTIONS = ['T561.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W','T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T563.W']
G2AW_T201W_allowed = ['T217.W', 'T205.W', 'T224.W', 'T563.W']
G2AW_T202W_allowed = ['T210.R']
G2AW_T203W_allowed = ['T218.R']
G2AW_T204R_allowed = ['T217.W', 'T205.W', 'T224.W', 'T563.W']
G2AW_T205W_allowed = ['T206.W', 'T224.W', 'T563.W']
G2AW_T206W_allowed = ['T217.W', 'T205.W']
G2AW_T210R_allowed = ['T201.W', 'T202.W']
G2AW_T224W_allowed = ['T217.W', 'T205.W', 'T563.W']
G2AW_T561W_allowed = ['T201.W']
G2AW_T563W_allowed = ['T208.R', 'T210.R']

G2BR_TRANSACTIONS = ['T562.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W','T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T563.W']
G2BR_T201W_allowed = ['T203.W', 'T205.W', 'T224.W', 'T563.W']
G2BR_T202W_allowed = ['T210.R']
G2BR_T203W_allowed = ['T204.R']
G2BR_T204R_allowed = ['T203.W', 'T205.W', 'T224.W', 'T563.W']
G2BR_T205W_allowed = ['T206.W', 'T224.W', 'T563.W']
G2BR_T206W_allowed = ['T203.W', 'T205.W']
G2BR_T210R_allowed = ['T201.W', 'T202.W']
G2BR_T224W_allowed = ['T203.W', 'T205.W', 'T563.W']
G2BR_T562R_allowed = ['T201.W', 'T202.W']
G2BR_T563W_allowed = ['T208.R', 'T210.R']

G2BW_TRANSACTIONS = ['T562.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W','T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T563.W']
G2BW_T201W_allowed = ['T217.W', 'T205.W', 'T224.W', 'T563.W']
G2BW_T202W_allowed = ['T210.R']
G2BW_T217W_allowed = ['T218.R']
G2BW_T218R_allowed = ['T217.W', 'T205.W', 'T224.W', 'T563.W']
G2BW_T205W_allowed = ['T206.W', 'T224.W', 'T563.W']
G2BW_T206W_allowed = ['T217.W', 'T205.W']
G2BW_T210R_allowed = ['T201.W', 'T202.W']
G2BW_T224W_allowed = ['T217.W', 'T205.W', 'T563.W']
G2BW_T562W_allowed = ['T201.W']
G2BW_T563W_allowed = ['T208.R', 'T210.R']

C2_TRANSACTIONS = ['T331.W', 'T201.W', 'T202.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T332.W']
C2_T201W_allowed = ['T332.W']
C2_T331W_allowed = ['T201.W']
C2_T332W_allowed = ['T208.R', 'T210.R']
C2_T210R_allowed = ['T201.W', 'T202.W']
C2_T202W_allowed = ['T210.R']

C3_TRANSACTIONS = ['T335.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T224.W', 'T336.W']
C3_T201W_allowed = ['T203.W', 'T205.W', 'T224.W', 'T336.W']
C3_T202W_allowed = ['T210.R']
C3_T203W_allowed = ['T204.R']
C3_T204R_allowed = ['T203.W', 'T205.W', 'T224.W', 'T336.W']
C3_T205W_allowed = ['T206.W', 'T224.W', 'T336.W']
C3_T206W_allowed = ['T203.W', 'T205.W']
C3_T210R_allowed = ['T201.W', 'T202.W']
C3_T224W_allowed = ['T203.W', 'T205.W', 'T336.W']
C3_T335R_allowed = ['T201.W', 'T202.W']
C3_T336W_allowed = ['T208.R', 'T210.R']

C5R_TRANSACTIONS = ['T341.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T226.W', 'T227.R', 'T228.R', 'T342.W']
C5R_T341R_allowed = ['T201.W', 'T202.W']
C5R_T201W_allowed = ['T203.W', 'T205.W', 'T226.W', 'T342.W']
C5R_T202W_allowed = ['T210.R']
C5R_T203W_allowed = ['T204.R']
C5R_T204R_allowed = ['T203.W', 'T205.W', 'T226.W', 'T342.W']
C5R_T205W_allowed = ['T203.W', 'T206.W', 'T226.W', 'T342.W']
C5R_T206W_allowed = ['T203.W', 'T205.W']
C5R_T210R_allowed = ['T201.W', 'T202.W']
C5R_T226W_allowed = ['T227.R', 'T228.R']
C5R_T227R_allowed = ['T342.W']
C5R_T228R_allowed = ['T203.W', 'T205.W', 'T226.W', 'T342.W']
C5R_T342W_allowed = ['T208.R', 'T210.R']

C5W_TRANSACTIONS = ['T341.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T226.W', 'T227.R', 'T228.R', 'T342.W']
C5W_T341W_allowed = ['T201.W']
C5W_T201W_allowed = ['T217.W', 'T205.W', 'T226.W', 'T342.W']
C5W_T202W_allowed = ['T210.R']
C5W_T217W_allowed = ['T218.R']
C5W_T218R_allowed = ['T217.W', 'T205.W', 'T226.W', 'T342.W']
C5W_T205W_allowed = ['T217.W', 'T206.W', 'T226.W', 'T342.W']
C5W_T206W_allowed = ['T217.W', 'T205.W']
C5W_T210R_allowed = ['T201.W', 'T202.W']
C5W_T226W_allowed = ['T227.R', 'T228.R']
C5W_T227R_allowed = ['T342.W']
C5W_T228R_allowed = ['T217.W', 'T205.W', 'T226.W', 'T342.W']
C5W_T342W_allowed = ['T208.R', 'T210.R']

H1R_TRANSACTIONS = ['T601.R', 'T201.W', 'T202.W', 'T203.W', 'T204.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.R', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T226.W', 'T227.R', 'T228.R', 'T602.W']
H1R_T601R_allowed = ['T201.W', 'T202.W']
H1R_T201W_allowed = ['T203.W', 'T205.W', 'T226.W', 'T602.W']
H1R_T202W_allowed = ['T210.R']
H1R_T203W_allowed = ['T204.R']
H1R_T204R_allowed = ['T203.W', 'T205.W', 'T226.W', 'T602.W']
H1R_T205W_allowed = ['T203.W', 'T206.W', 'T226.W', 'T602.W']
H1R_T206W_allowed = ['T203.W', 'T205.W']
H1R_T210R_allowed = ['T201.W', 'T202.W']
H1R_T226W_allowed = ['T227.R', 'T228.R']
H1R_T227R_allowed = ['T602.W']
H1R_T228R_allowed = ['T203.W', 'T205.W', 'T226.W', 'T602.W']
H1R_T602W_allowed = ['T208.R', 'T210.R']

H1W_TRANSACTIONS = ['T601.W', 'T201.W', 'T202.W', 'T217.W', 'T218.R', 'T205.W', 'T206.W', 'T207.R', 'T207.W', 'T208.R', 'T210.R', 'T211.W', 'T213.W', 'T214.W', 'T215.R', 'T215.W', 'T216.R', 'T216.W', 'T226.W', 'T227.R', 'T228.R', 'T602.W']
H1W_T601W_allowed = ['T201.W']
H1W_T201W_allowed = ['T217.W', 'T205.W', 'T226.W', 'T602.W']
H1W_T202W_allowed = ['T210.R']
H1W_T217W_allowed = ['T218.R']
H1W_T218R_allowed = ['T217.W', 'T205.W', 'T226.W', 'T602.W']
H1W_T205W_allowed = ['T217.W', 'T206.W', 'T226.W', 'T602.W']
H1W_T206W_allowed = ['T217.W', 'T205.W']
H1W_T210R_allowed = ['T201.W', 'T202.W']
H1W_T226W_allowed = ['T227.R', 'T228.R']
H1W_T227R_allowed = ['T602.W']
H1W_T228R_allowed = ['T217.W', 'T205.W', 'T226.W', 'T602.W']
H1W_T602W_allowed = ['T208.R', 'T210.R']

fake = Faker()
fake.add_provider(Enzyme)

#pick random SPID, METER_MNF_ METER_SERIAL
def pick_spid_meter():
    spid_meter = random.choice(list(SPIDS_METERS.items()))
    spid = spid_meter[0]
    meter_mnf = spid_meter[1][0]
    meter_ser = spid_meter[1][1]
    return spid, meter_mnf, meter_ser

def pick_swg_spid_meter():
    swg_spid_meter = random.choice(list(SWG_SPIDS_METERS.items()))
    swg_spid = swg_spid_meter[0]
    swg_meter_mnf = swg_spid_meter[1][0]
    swg_meter_ser = swg_spid_meter[1][1]
    return swg_spid, swg_meter_mnf, swg_meter_ser

def random_email():
    return fake.company_email()

def random_string():
    return ''.join(random.choice(string.ascii_letters) for _ in range(15))

def random_name():
    return names.get_full_name()

def random_phone():
    return random.randint(4400000000, 4499999999)

def random_meter_ser():
    return '10W' + str(random.randint(0000000000, 9999999999))

def random_meter_mnf():
    return ''.join(random.choice(string.ascii_letters).upper() for _ in range(random.randint(4, 10)))

def random_gisx():
    return random.randint(82644, 655612)

def random_gisy():
    return random.randint(5186, 657421)

def random_meter_loc():
    return random.choice(['UNDER_THE_TREE', 'SOMEWHERE', 'IN_THE_BASEMENT', 'ON_THE_ROOF', 'UNDER_THE_SINK', 'NO_IDEA_WHERE', 'IN_THE_BACKYARD', 'BELOW_THE_WINDOW'])

def date_not_weekend():
    if datetime.today().weekday() >=0 and datetime.today().weekday() <=3:
        return '[today+' + str(4 - datetime.today().weekday()) + ']'
    else:
        return '[today+3]'

def time_not_weekend():
    if datetime.today().weekday() >=0 and datetime.today().weekday() <=3:
        return '[now+' + str(4 - datetime.today().weekday()) + ']'
    else: 
        return '[now+3]'
    
def get_random_address(): # !!!!!!!!!! LEARN HOW TO USE IT
    rand_address =  real_random_address()
    return rand_address["address1"]

#C1
D8036 = ['ERROR', 'DUPLICATE', 'SWITCHED', 'REJECTION', 'UNABLEASST', 'DISAGREEPLAN'] # T211.R T211.W Cancellation Reason Code
D8226 = ['NOCONTACT', 'UNCOOPCUST', 'INACCONTACT', 'MOREDETAILS'] # T203.W T217W Additional Information Request Code
D8228 = ['WHOL', 'NONWHOL'] # T206.W Site Visit Failure Code
D8229 = ['CUSTOMER', 'RETAILER', 'THIRDPARTY', 'CONSENTS', 'REGULAT', 'WEATHER', 'FORCEMAJ', 'INFOREQD', 'BULK'] # T213.W Request Deferral Code
D8230 = ['INACCURATE', 'DUPLICATE', 'WRONGPRO', 'POLICY', 'HOUSEHOLD', 'NOTWHOL'] # T202.W Reject Reason Code
D8231 = ['DISPREJECT', 'DISPCMOS', 'DISPQUOTE'] # T210.R Resubmit Reason Code
D8236 = ['EMAIL', 'TEL', 'BOTH'] # T321.R T321.W Customer Preferred Method of Contact
D2005 = ['SEMDV', 'NA'] # T321.R T321.W Customer Classification – Sensitive Customer
D8237 = ['AM', 'PM', 'BOTH'] # T321.R T321.W
D8242 = ['METER', 'SUPPLY', 'BOTH'] # T321.R T321.W
D8262 = ['ACCEPT', 'REJECT'] # T321.R T321.W
D8242 = ['PDF', 'JPG', 'PNG'] # T215.R T215.W
D3025 = ['I', 'O']

#B1 #B7
D8327 = ['NEWINSTALL', 'CHGNEW', 'LOCCHGNEW', 'LOCCHGEXG', 'UNFEASIBLE'] # B1 B7 COMPLETED T223.W -> Meter Work Complete Code

#B3
D8346 = ['INSIDE', 'OUTSIDE', 'UNKNOWN'] # T353.R Meter Location Code
D8348 = ['OVERRECORD', 'UNDERRECORD', 'OTHER'] # T353.R Meter Location Code
D8367 = ['AFTEREXCHG', 'ALREADYTESTED', 'INSITUTESTED']
D8368 = ['WITHIN', 'OUTSIDE']
D8369 = ['1', '0']

#B5
D8227 = ['PARTS', 'STREETWORKS', 'THIRDPARTY', 'CUSTCONFRM', 'PREPWORK', 'OTHER'] # T224.W Delay Reason Code - B5R B5W - Advise Process Delay
D8332 = ['NOISSUE', 'NOWATER', 'FLOODING'] # T351.R T351.W Public Health Issue
D8333 = ['REMOVED', 'NOTREMOVED'] # T351.R T351.W Datalogger Status
D8335 = ['STD', 'NONSTD'] # T351.R T351.W Meter Model
D8337 = D8838 = D8839 = ['STOPPED', 'BACKWARD', 'SLOWED', 'BURRIED', 'CONDENS', 'ELECT', 'BURST', 'SMASHED', 'REMOVED', 'NONMETER', 'OTHER'] # T351.R T351.W Meter Fault
D8330 = ['0', '1'] #T351.R T351.W Meter Fault address same as CMOS
D8341 = ['REPLACED', 'REPAIRED', 'NOUPDATE', 'NOFAULT', 'NONMETER', 'UPDATE'] # T352.W Complete Reason Code

#B7
D8326 = ['CHGTYPE', 'CHGSSIZE', 'CHGLSIZE', 'CHGLOC'] # B7 T365.R Request Meter Change -> Meter Work Request Type

#F4
D8364 = ['DWENQUIRY', 'OTHERENQUIRY'] # F4 T505.R Request Type
D8365 = ['WATERQUALITY', 'FLUORIDE', 'HARDNESS', 'QUALITYREPT', 'GENERAL', 'ANIMALS', 'LEAD', 'PUBLICINFO'] # F4 T505.R Drinking Water Enquiry Type - D8364 = 'DWENQUIRY'
D8352 = ['FOLLOWON', 'NOFOLLOWON'] #F4 T222.W Response Type

#F5
D8356 = ['FIRST', 'FURTHER', 'CCWLEVEL', 'ADR', 'OTHER'] #F5 T501.R/W Complaint Level
D8358 = ['ADMINISTRATION', 'METERINGASSET', 'BILLING', 'WATER', 'SEWERAGE', 'OTHER'] #F5 T501.R/W Complaint Category
D8360 = ['GSSFAILURE', 'OTHER', 'NONE'] #F5 T501.R/W Compensation Claimed

#G2A G2B
D8371 = ['NEWCONSENT', 'NEWTEMPCONSENT', 'RENEWCONSENT']
D8374 =	['YES', 'NO', 'NA']
D8375 =	['YES', 'NO', 'NA']
D8376 =	['YES', 'NO', 'NA']
D8377 =	['YES', 'NO', 'NA']
D8378 =	['YES', 'NO', 'NA']
D8379 =	['YES', 'NO', 'NA']
D8380 =	['YES', 'NO', 'NA']
D8381 =	['YES', 'NO', 'NA']
D8382 =	['NOTREQD', 'GRANTED', 'NOTGRANTED']
D8383 =	['PERMANENT', 'TEMPORARY', 'RENEWAL']
D8384 =	['YES', 'NO', 'NA']
D8385 =	['YES', 'NO', 'NA']
D8386 =	['YES', 'NO', 'NA']

#C2 C3
D8391 = ['METERED','UNMETERED']
D8393 = ['WSPID', 'SSPID', 'WSSPID']
D8402 = ['GS', 'CU']

#C5
D8412 = ['SPIDDEREG', 'REMOVESC']
D8413 = ['DEMOLISHED','MERGED','NOWAT','NOWATORSEWG','NOSC','LANDLORD','NOTELIGIBLE','COU','DUPLICATE']
D8414 = ['0', '1']
D8417 = ['0', '1']
D8418 = ['0', '1']
D8419 = ['0', '1']
D8420 = ['0', '1']
D8421 = ['0', '1']
D8422 = ['0', '1']
D8423 = ['0', '1']
D8424 = ['0', '1']
D8425 = ['0', '1']
D8426 = ['0', '1']
D8427 = ['0', '1']

D8430 = ['SINGLE','COMOCCUP','COMMGMT']
D8442 = ['AGREED','AMENDAGREED','NOTAGREED']
D8443 = ['SPIDDREG','AMENDED','NOTAMENDED']

D8446 = ['0', '1']
D8447 = ['0', '1']
D8448 = ['0', '1']
D8449 = ['0', '1']

D8450 = ['0', '1']
D8451 = ['0', '1']
D8452 = ['0', '1']
D8453 = ['0', '1']
D8454 = ['0', '1']
D8455 = ['0', '1']

D8462 = ['SPIDDEREG', 'REMOVESC']
D8463 = ['INCORRECTWHL', 'INCORRECTRTL']
D8465 = ['WATER', 'SEWERAGE', 'BOTH']


#H1
D8464 = ['NEW', 'REVIEW']
D8465 = ['WATER', 'SEWERAGE', 'BOTH']
D8466 = ['FIREFIGHTING', 'LEAK', 'VOLUMEADJST', 'NONRTSCHANGE', 'SWAREACHANGE']
D8471 = ['VOLUMETRIC', 'METERBASED']
D8472 = ['FIREFIGHTING', 'FIREFIGHTINGTEST', 'FIREFIGHTINGTRNG', 'OTHER']
D8478 = ['LEAKPROPERTY', 'LEAKMETER', 'LEAKCUST', 'OTHER']
D8479 = ['REPSUPPLYPIPE', 'REPPREMISES', 'NEWINSTALL', 'OTHER']
D8481 = ['WHOLESALER', 'CUSTOMER']
D8482 = ['GROUND', 'DRAINAGESYSTEM']
D8483 = ['THIRDPARTY', 'DETERIORATION', 'LEAKONPIPE', 'FITTINGS', 'NEGLECT', 'OTHER']
D8490 = ['EVAPORATION', 'IRRIGATION', 'REMOVEDOFFSITE', 'ADDTOPRODUCT', 'LIVESTOCKDW', 'OTHER']
D8495 = ['AWARDNOAMEND', 'AWARDWITHAMEND', 'NOTAWARDED']
D8497 = ['PERCENT', 'M2', 'M3', 'TARIFF']



test_case_sequence = []
def generate_test_case(loop_times):
    global test_case_sequence
    new_filename = ""
    program_mode = input("Do you want to run in [I]interactive or [P]redefined mode? ")
    while program_mode not in ('I', 'P'):
        program_mode = input("You can choose only from [I]interactive or [P]redefined mode? What's your choice? ")
    if program_mode == 'I':
        ############################################################### ASK USER WHICH TEST CASE HE/SHE WANTS
        available_processes = ""
        for b in range(len(PROC_NAMES)):
            ################################################################### get process name from PROC_NAMES  + get process description
            available_processes = available_processes + "{:2}".format(b+1) + " - " + list(PROC_NAMES.keys())[b] + " - " +  PROC_NAMES.get(list(PROC_NAMES.keys())[b])+ "\n"
        chosen_process = input("Choose process to start with - available are: \n\n" + available_processes + "\n")
        while ((not chosen_process.isdigit()) or (int(chosen_process) not in range(1, len(PROC_NAMES)+1))):
                chosen_process = input("\nWrong choice! You can only choose from available processes: \n" + available_processes + "\nChoose process:")
        chosen_proc = int(chosen_process)
        print("\nYour choice: " + str(list(PROC_NAMES.keys())[chosen_proc-1]) + " - " +  PROC_NAMES.get(PROCESSES[chosen_proc-1])) 
        
        #choose 1st transaction from chosen process i.e. C1R + _TRANSACTIONS
        chosen_process1 = globals()[PROCESSES[chosen_proc-1] + '_TRANSACTIONS']
        starting_transaction = chosen_process1[0]
        
        #append initiating transaction to the TEST_CASE_SEQUENCE
        test_case_sequence.append(starting_transaction)
        more_transactions = input("I will generate test case with transaction:\n" + starting_transaction + " - " + TRANSACTION_NAMES.get(starting_transaction) + "\nDo you want to add more transactions for current process? [Y]/[N], [C]hange process or [A]ny transaction from current process?\n")
        while more_transactions not in ('Y', 'N', 'C', 'A'):
            more_transactions = input("You can only choose [Y]es, [N]o, [C]hange or [A]ny. Do you want to add more transactions for current process? [Y]/[N], [C]hange process or [A]ny transaction from current process?\n")
        if more_transactions =='N':
            print("Generating a test case, thank you. Bye!")
        if more_transactions == 'C':
            generate_test_case(max_loop) # REPEAT FROM START - TEST_CASE_SEQUENCE WILL NOT BE OVERWRITTEN!!!!    
            
        # when A selected loop through all transactions in the process, when Y selected loop through available transactions in the process    
        while more_transactions == 'Y' or more_transactions == 'A':
            if  more_transactions == 'A':
                next_transactions = globals()[PROCESSES[chosen_proc-1] + '_TRANSACTIONS']
            if more_transactions == 'Y':   
                next_transactions = globals()[PROCESSES[chosen_proc-1] + '_' + starting_transaction.replace('.', '') + '_allowed']
            print("\nAvailable transactions for this process are:")
            next_transactions1 = ""
            for i in range(len(next_transactions)):
                next_transactions1 += str(i+1) + " " + next_transactions[i] + "\n" 
                print(str(i+1) + " " + str(next_transactions[i]) + " - " + TRANSACTION_NAMES.get(next_transactions[i]))
            print('\n')
            next_transaction = input("Which transaction you want next?\n")
            #allow user to choose only valid transactions - check if user inpur is digit and it is from allowed range
            while ((not next_transaction.isdigit()) or (int(next_transaction) not in range(1, len(next_transactions)+1))):
                    next_transaction = input("You can only choose from available transactions \n" + next_transactions1  + "\nChoose transaction: ")
            next_tran = int(next_transaction)
            print("Your choice: " + str(next_transactions[next_tran-1])) 
            test_case_sequence.append(next_transactions[next_tran-1])
            # if in available processes mode exit when found T208.R
            if more_transactions == 'Y' and str(next_transactions[next_tran-1]) == 'T208.R':
                print("\nTest case sequence:")
                print(test_case_sequence)
                print("\nT208.R was the last transaction. Generating a test case, thank you. Bye!")
                break
            print("\nTest case sequence:")
            print(test_case_sequence)
            starting_transaction = next_transactions[next_tran-1]
            more_transactions = input("Do you want to add more transactions for current process? [Y]/[N], [C]hange process or [A]ny transaction from current process?\n")
            while more_transactions not in ('Y', 'N', 'C', 'A'):
                more_transactions = input("You can only choose [Y]es, [N]o, [C]hange or [A]ny. Do you want to add more transactions for current process? [Y]/[N], [C]hange process or [A]ny transaction from current process?\n")
            if more_transactions == 'C':
                generate_test_case(max_loop) # REPEAT FROM START - TEST_CASE_SEQUENCE WILL NOT BE OVERWRITTEN!!!!                   
            if more_transactions =='N':
                print("Generating a test case, thank you. Bye!") 
    if program_mode == 'P':
        test_case_sequence = TEST_CASE_TRANSACTIONS        
##############################################################################    
    for a in range(loop_times):
        # assign random SPID, METER_MNF, METER_SERIAL to variables - use EXCEL or SPIDS_METERS static dictionary
        SPID, METER_MNF, METER_SER = pick_spid_meter()
        SWG_SPID, SWG_METER_MNF, SWG_METER_SER = pick_swg_spid_meter()
        CUST_EMAIL = random_email()
        RET_EMAIL = random_email()
        RANDOM_STRING = random_string()
        CUST_RANDOM_NAME = random_name()
        CUST_RANDOM_PHONE = random_phone()
        RET_RANDOM_NAME = random_name()
        RET_RANDOM_PHONE = random_phone()
        CUST_RANDOM_NAME2 = random_name()
        CUST_RANDOM_PHONE2 = random_phone()
        RET_RANDOM_NAME2 = random_name()
        RET_RANDOM_PHONE2 = random_phone()
        RANDOM_METER_SER = random_meter_ser()
        RANDOM_METER_MNF = random_meter_mnf()
        RANDOM_GISX = random_gisx()
        RANDOM_GISY = random_gisy()
        OUTR_RANDOM_GISX = random_gisx()
        OUTR_RANDOM_GISY = random_gisy()
        RANDOM_METER_LOC = random_meter_loc()
        RANDOM_OUTRE_LOC = random_meter_loc()
        DATE_NOT_WEEKEND = date_not_weekend()
        TIME_NOT_WEEKEND = time_not_weekend()
        RANDOM_ADDRESS1 = get_random_address()
        RANDOM_ADDRESS2 = get_random_address()
        RANDOM_ADDRESS3 = get_random_address()
        RANDOM_ADDRESS4 = get_random_address()
        RANDOM_ADDRESS5 = get_random_address()

        T321R_data_items = [# basic data
                        SPID, 'MEASURED', 'RET_' + RANDOM_STRING, '', '1', '[today]', '1',
                        # customer and retailer data
                        CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                        RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                        # first meter details
                        METER_MNF, METER_SER, '0', '120', '[today-1]', '0', 'METER', '1', RANDOM_METER_MNF, '1', RANDOM_METER_SER, '1', '5', '1', '5',
                        '1', RANDOM_GISX, '1', RANDOM_GISY, '1', 'O', '1', RANDOM_METER_LOC, '1', OUTR_RANDOM_GISX, '1', OUTR_RANDOM_GISY, '1', 'I', '1', RANDOM_OUTRE_LOC, RANDOM_STRING, '',
                        # second meter details empty
                        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                        # missing meters
                        '', '', '', '',
                        # unmeasrued data empty
                        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''
                        ]
        T321W_data_items = [# basic data
                        SPID, 'MEASURED', '', '[today]',
                        # first meter details
                        METER_MNF, METER_SER, '0', '120', '[today-1]', '0', 'METER', '1', RANDOM_METER_MNF, '1', RANDOM_METER_SER, '1', '5', '1', '5',
                        '1', RANDOM_GISX, '1', RANDOM_GISY, '1', 'O', '1', RANDOM_METER_LOC, '1', OUTR_RANDOM_GISX, '1', OUTR_RANDOM_GISY, '1', 'I', '1', RANDOM_OUTRE_LOC, RANDOM_STRING, '',
                        # second meter details empty
                        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                        # missing meters
                        '', '', '', '',
                        # unmeasrued data empty
                        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''
                        ]
        T201W_data_items = ['[orid]', 'ACCEPTED']
        T202W_data_items = ['[orid]', 'WSL-123456', random.choice(D8230), 'REJECTED']
        T203W_data_items = ['[orid]', random.choice(D8226), 'INFOREQST']
        T204R_data_items = ['[orid]', 'INFOPROVD']
        T205W_data_items = ['[orid]', DATE_NOT_WEEKEND, '', 'VISITSCHED']
        T206W_data_items = ['[orid]', random.choice(D8228), 'VISITNOTCOMP']
        T207R_data_items = ['[orid]', 'RETAILER_COMMENT']
        T207W_data_items = ['[orid]', 'WHOLESALER_COMMENT']
        T208R_data_items = ['[orid]', 'CLOSED']
        T210R_data_items = ['[orid]', random.choice(D8231), 'RESUBMITTED']
        T211R_data_items = ['[orid]', random.choice(D8036), 'RTL CANCELLED']
        T211W_data_items = ['[orid]', random.choice(D8036), 'WSL CANCELLED']
        T212W_data_items = ['[orid]', 'PREPPLAN']
        T213W_data_items = ['[orid]', random.choice(D8229), '[today]', '[today+7]', 'START_DEFERRAL']
        T214W_data_items = ['[orid]', '[today]', 'END_DEFERRAL'] # can think of function to peek working day
        T215R_data_items = ['[orid]', '', 'img1png', 'PNG', '4oCwUE5HChoKICAgCklIRFIgICADICAgAwgCICAgxa5KIsSNICAgCXBIWXMgIA7DhCAgDsOEAeKAoisOGyAgICdJREFUCOKEomPDlG7Dn8O2y5nLmX8BNnbCpn/LmcWjMTMzH8OrxI9nYmXLmXd5w7cmxLrFmBAgxZDFnwrFpH4uJsKsICAgIElFTkTCrkJg4oCa']
        T215W_data_items = ['[orid]', '', 'img1png', 'PNG', '4oCwUE5HChoKICAgCklIRFIgICADICAgAwgCICAgxa5KIsSNICAgCXBIWXMgIA7DhCAgDsOEAeKAoisOGyAgICdJREFUCOKEomPDlG7Dn8O2y5nLmX8BNnbCpn/LmcWjMTMzH8OrxI9nYmXLmXd5w7cmxLrFmBAgxZDFnwrFpH4uJsKsICAgIElFTkTCrkJg4oCa']
        T216R_data_items = ['[orid]', T216_URL]
        T216W_data_items = ['[orid]', T216_URL]
        T217W_data_items = ['[orid]', '1', random.choice(D8226), 'CUSTINFOREQST']

        T218R_data_items = ['[orid]', 'RET_' + RANDOM_STRING, '[today]',
                             '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', 
                             random.choice(D8237),  RANDOM_STRING, random.choice(D2005), RANDOM_STRING,RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', 
                             RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL, 'CUSTINFOPROVD']
        T220W_data_items = ['[orid]', fake.paragraph(nb_sentences=1)]
        T221R_data_items = ['[orid]', fake.paragraph(nb_sentences=1)]
        T222W_data_items = [# basic data
                            '[orid]', 'FOLLOWON', fake.paragraph(nb_sentences=1), fake.paragraph(nb_sentences=1),'[today+' + str(random.randint(2, 10))  +']', '1', '', '', fake.paragraph(nb_sentences=1)
                            ]
        T223W_data_items = [# basic data
                            '[orid]', 'NEWINSTALL', fake.paragraph(nb_sentences=1),
                            #meter work copletion data
                            RANDOM_METER_MNF, RANDOM_METER_SER, random.randint(100, 1000), '[today-' + str(random.randint(2, 30))  +']', random.randint(5, 15), random.randint(2, 6), RANDOM_GISX, RANDOM_GISY, random.choice(D3025), RANDOM_METER_LOC, OUTR_RANDOM_GISX, OUTR_RANDOM_GISY, random.choice(D3025), RANDOM_OUTRE_LOC, RANDOM_STRING, RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999)
                            ] 
        T224W_data_items = ['[orid]', random.choice(D8227), 'PROCDELAY_' + RANDOM_STRING]
        T225R_data_items = [
            '[orid]', 
            random.choice(D8463), 
            fake.paragraph(nb_sentences=1),
            '[today]'
            ]
        T226W_data_items = [
            '[orid]', 
            random.choice(D8442), 
            fake.paragraph(nb_sentences=1)
            ]
        T227R_data_items = [
            '[orid]', 
            fake.paragraph(nb_sentences=1)
            ]
        T228R_data_items = [
            '[orid]', 
            fake.paragraph(nb_sentences=1)
            ]
        T323W_data_items = ['[orid]', 'ABLE', TIME_NOT_WEEKEND, '0', '1', DATE_NOT_WEEKEND, 'PLANPROP']
        T324R_data_items = ['[orid]', 'PLANAGREED']
        T325R_data_items = ['[orid]', 'PLANDISP']
        T322W_data_items = [# basic data
                            '[orid]', '1', 
                            # 1st meter data
                            METER_MNF, METER_SER, '0', '1', RANDOM_METER_MNF, '1', RANDOM_METER_SER, '1', '12', '1', '5',
                            '1', RANDOM_GISX, '1', RANDOM_GISY, '1', 'I', '1', RANDOM_METER_LOC, '1', OUTR_RANDOM_GISX, '1', OUTR_RANDOM_GISY, '1', 'O', '1', RANDOM_OUTRE_LOC, 'MORE_INFO_T322W',
                            # 2nd meter data
                            '', '', '', '', '', '', '', '', '', '', '',
                            '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                            # missing meters data
                            '', '', '', '', '', '',
                            # unmeasured  data
                            '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
                            '', '', '']
        T331W_data_items = [SPID, 'UNMETERED', '123', '[today-' + str(random.randint(1, 45))  +']', 'WSPID', fake.paragraph(nb_sentences=1), '0', '0', '0',
                            '0', '1', 'WSPID', '0', '', fake.paragraph(nb_sentences=1), '[today]', '', '', '', '', '', ''
                            ]   
                            # CKECK CHECK!!!!!!!!!!!!!!!!!!!!!!!!!!!! POSTCODE
        T332W_data_items = ['[orid]', '[today-' + str(random.randint(1, 45))  +']', random.choice(D8402), 'VOA_BA_REF', '', '12345678', '', 'WATERS CO UK',
                            '', '', '', '', '', RANDOM_ADDRESS1, '', '', '', '', random.choice(POSTCODES), '' , '', '', '', '', '', '', "", '', ""
                          ]
        T335R_data_items = ['MOSLTEST-W', 'REF123', 'HOT WATERS', '', '', '', '', 'Mancherster 123', '', '', '', '', random.choice(POSTCODES), '', '', '', 
                            'METERED', '', '[today-' + str(random.randint(1, 45))  +']', 'WSPID', fake.paragraph(nb_sentences=1), '0', '0', '0', '0', '0', '', '', '', fake.paragraph(nb_sentences=1), '1', '1', '[today]', '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '103', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237), RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''
                            ]
        T336W_data_items = ['[orid]', 'RA', 'MOSLTEST-R','1', '', SPID, 'UNMETERED', '1', '', '', '1', fake.paragraph(nb_sentences=1),
                             fake.paragraph(nb_sentences=1), '', '[today-' + str(random.randint(1, 45))  +']', 'GS', 'VOA_BA_REF', '', '123123123', '', 'COLD WATERS', '', '', '', '', '', RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''
                             ]
        T341R_data_items = [
            #D2001
            SWG_SPID, 
            #D8412
            'REMOVESC', 
            #d8413
            'MERGED', 
            #D8414
            '0',
            #D3013
            SWG_METER_MNF,
            #D3014
            SWG_METER_SER,
            #D3013
            '', #SWG_METER_MNF,
            #D3014
            '', #SWG_METER_SER,
            #D8415
            fake.paragraph(nb_sentences=1),
            #D8416 
            fake.paragraph(nb_sentences=1),
            #D8417
            '', 
            #D8418
            '', 
            #D8419
            '', 
            #D8420
            '', 
            #D8421
            '', 
            #D8422
            random.choice(D8422),
            #D8423
            random.choice(D8423),
            #D8424
            random.choice(D8424),
            #D8425
            random.choice(D8425),
            #D8426
            random.choice(D8426),
            #D8427
            random.choice(D8427),
            #D8450
            random.choice(D8450),
            #D8462
            'REMOVESC',
            #D8451
            '1',
            #D8452
            random.choice(D8452),
            #D8453
            random.choice(D8453),
            #D8454
            random.choice(D8454),
            #D8455
            random.choice(D8455),
            #D8456
            '', 
            #D8457
            '', 
            #D8458
            '', 
            #D8459
            '', 
            #D8460
            '', 
            #D8461
            '', 
            #D6001
            'DPID_' + RANDOM_STRING,
            #D8428
            fake.paragraph(nb_sentences=1),
            #D8429
            '[today+' + str(random.randint(1, 15))  +']',
            #D8430
            random.choice(D8430),
            #D8431
            'PRIMARY',
            #D8323
            '', 
            #D8213
            fake.paragraph(nb_sentences=1),
            #D8252
            '1', 
            #D8186
            'REF_' + RANDOM_STRING,
            #D8193
            '[today]',
            #D8019
            '1',
            #D8020
            CUST_RANDOM_NAME, 
            #D8021
            CUST_RANDOM_PHONE, 
            #D8233
            '105', 
            #D8239
            CUST_RANDOM_NAME2, 
            #D8145
            CUST_RANDOM_PHONE2, 
            #D8234
            '122',
            #D8146 
            CUST_EMAIL, 
            #D8235
            '1',
            #D8236 
            'EMAIL', 
            #D8237
            random.choice(D8237),
            #D8238
            fake.paragraph(nb_sentences=1), 
            #D2005
            random.choice(D2005), 
            #D8240
            fake.paragraph(nb_sentences=1), 
            #D8269
            RET_RANDOM_NAME, 
            #D8270
            RET_RANDOM_PHONE, 
            #D8271
            '210', 
            #D8280
            RET_RANDOM_NAME2, 
            #D8272
            RET_RANDOM_PHONE2, 
            #D8273
            '224', 
            #D8274
            RET_EMAIL,
        #GROUP DEMOLISHED
            #D8432
            #'[today-' + str(random.randint(1, 15))  +']',
            '', 
        #GROUP MERGED
            #D8433
            SPID,
            #D8434 
            '', 
            #D2027
            CUST_RANDOM_NAME,
            #D2050
            CUST_RANDOM_NAME2,
            #D5004
            RANDOM_ADDRESS1, 
            #D5005
            RANDOM_ADDRESS2, 
            #D5006
            RANDOM_ADDRESS3, 
            #D5007
            RANDOM_ADDRESS4, 
            #D5008
            RANDOM_ADDRESS5,
            #D5009
            random.choice(POSTCODES),
            #D2037
            'VOA_BA_REF',
            #D2039
            '123123123',
            #D2011
            '1234.12',
            #D8435
            RANDOM_METER_SER,
            #D8436
            '1', 
            #D8437
            fake.paragraph(nb_sentences=1), 
            #D8441
            '[today-' + str(random.randint(1, 15))  +']',
            #GROUP NOCS
            #D8438
            #fake.paragraph(nb_sentences=1), 
            '', 
        #GROUP LANDLORD
            #D8433
            '',
            #D8434 
            '', 
            #D2027
            #CUST_RANDOM_NAME,
            '', 
            #D2050
            #CUST_RANDOM_NAME2,
            '', 
            #D5004
            #RANDOM_ADDRESS1, 
            '', 
            #D5005
            #RANDOM_ADDRESS2, 
            '', 
            #D5006
            #RANDOM_ADDRESS3, 
            '', 
            #D5007
            #RANDOM_ADDRESS4, 
            '', 
            #D5008
            #RANDOM_ADDRESS5,
            '', 
            #D5009
            #random.choice(POSTCODES),
            '', 
            #D2037
            #'VOA_BA_REF',
            '', 
            #D2039
            #'123123123',
            '', 
            #D2011
            #'1234',
            '', 
            #D8435
            #RANDOM_METER_SER,
            '', 
            #D8436
            #'1', 
            '', 
            #D8437
            #fake.paragraph(nb_sentences=1), 
            '', 
        #GROUP NOTELIGIBLE
            #D8439
            #fake.paragraph(nb_sentences=1), 
            '', 
        #GROUP DUPLICATE
            #D8440
            #fake.paragraph(nb_sentences=1), 
            '', 
            ]
        T341W_data_items = [
            #D2001
            SWG_SPID, 
            #D8412
            'REMOVESC', 
            #d8413
            'MERGED', 
            #D8414
            '0',
            #D3013
            SWG_METER_MNF,
            #D3014
            SWG_METER_SER,
            #D3013
            '', #SWG_METER_MNF,
            #D3014
            '', #SWG_METER_SER,
            #D8415
            fake.paragraph(nb_sentences=1),
            #D8416 
            fake.paragraph(nb_sentences=1),
            #D8417
            '', 
            #D8418
            '', 
            #D8419
            '', 
            #D8420
            '', 
            #D8421
            '', 
            #D8422
            random.choice(D8422),
            #D8423
            random.choice(D8423),
            #D8424
            random.choice(D8424),
            #D8425
            random.choice(D8425),
            #D8426
            random.choice(D8426),
            #D8427
            random.choice(D8427),
            #D8450
            random.choice(D8450),
            #D8462
            'REMOVESC',
            #D8451
            random.choice(D8451),
            #D8452
            random.choice(D8452),
            #D8453
            random.choice(D8453),
            #D8454
            random.choice(D8454),
            #D8455
            random.choice(D8455),
            #D8456
            '', 
            #D8457
            '', 
            #D8458
            '', 
            #D8459
            '', 
            #D8460
            '', 
            #D8461
            '', 
            #D6001
            'DPID_' + RANDOM_STRING,
            #D8428
            fake.paragraph(nb_sentences=1),
            #D8429
            '[today+' + str(random.randint(1, 15))  +']',
            #D8430
            random.choice(D8430),
            #D8431
            'PRIMARY',
            #D8323
            '', 
            #D8213
            fake.paragraph(nb_sentences=1),
            #D8193
            '[today]',
        #GROUP DEMOLISHED
            #D8432
            #'[today-' + str(random.randint(1, 15))  +']',
            '', 
        #GROUP MERGED
            #D8433
            SPID,
            #D8434 
            '', 
            #D2027
            CUST_RANDOM_NAME,
            #D2050
            CUST_RANDOM_NAME2,
            #D5004
            RANDOM_ADDRESS1, 
            #D5005
            RANDOM_ADDRESS2, 
            #D5006
            RANDOM_ADDRESS3, 
            #D5007
            RANDOM_ADDRESS4, 
            #D5008
            RANDOM_ADDRESS5,
            #D5009
            random.choice(POSTCODES),
            #D2037
            'VOA_BA_REF',
            #D2039
            '123123123',
            #D2011
            '1234.12',
            #D8435
            RANDOM_METER_SER,
            #D8436
            '1', 
            #D8437
            fake.paragraph(nb_sentences=1), 
            #D8441
            '[today-' + str(random.randint(1, 15))  +']',
        #GROUP NOCS
            #D8438
            '', 
        #GROUP LANDLORD
            #D8433
            '',
            #D8434 
            '', 
            #D2027
            #CUST_RANDOM_NAME,
            '', 
            #D2050
            #CUST_RANDOM_NAME2,
            '', 
            #D5004
            #RANDOM_ADDRESS1, 
            '', 
            #D5005
            #RANDOM_ADDRESS2, 
            '', 
            #D5006
            #RANDOM_ADDRESS3, 
            '', 
            #D5007
            #RANDOM_ADDRESS4, 
            '', 
            #D5008
            #RANDOM_ADDRESS5,
            '', 
            #D5009
            #random.choice(POSTCODES),
            '', 
            #D2037
            #'VOA_BA_REF',
            '', 
            #D2039
            #'123123123',
            '', 
            #D2011
            #'1234',
            '', 
            #D8435
            #RANDOM_METER_SER,
            '', 
            #D8436
            #'1', 
            '', 
            #D8437
            #fake.paragraph(nb_sentences=1), 
            '', 
        #GROUP NOTELIGIBLE
            #D8439
            #fake.paragraph(nb_sentences=1),
            '',
        #GROUP DUPLICATE
            #fake.paragraph(nb_sentences=1),
            #D8440
            ''
            ]                    
        T342W_data_items = [
            #D8221
            '[orid]',
            #D8442
            random.choice(D8442),
            #D8443 
            random.choice(D8443), 
            #D8444
            '[today-' + str(random.randint(0, 15))  +']', 
            #D4006
            '[today+' + str(random.randint(0, 15))  +']', 
            #D8445
            fake.paragraph(nb_sentences=1), 
            #D8445
            random.choice(D8446), 
            #D8447
            random.choice(D8447), 
            #D8448
            random.choice(D8448), 
            #D8449
            random.choice(D8449), 
            #D8213
            fake.paragraph(nb_sentences=1),   
            ]
        T351R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '', '1', '[today]', '1',
                            # customer and retailer data
                            CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # meter details
                            METER_MNF, METER_SER, random.choice(D8330), str(random.randint(1111, 9999)) + RANDOM_STRING, str(random.randint(1111, 9999)) + RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), '0', '',
                            random.choice(D8332), '1', 'NOTREMOVED', '[today+' + str(random.randint(1, 15))  +']', random.choice(D8335), 'METER_' + RANDOM_STRING, 'STOPPED', 'BACKWARD', 'SLOWED', '', random.randint(100, 9999), '[today-' + str(random.randint(1, 45))  +']', fake.paragraph(nb_sentences=1)
                            ]
        T351W_data_items = [# basic data
                            SPID, '', '[today]',
                            # meter details
                            METER_MNF, METER_SER, random.choice(D8330), str(random.randint(1111, 9999)) + RANDOM_STRING, str(random.randint(1111, 9999)) + RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), '0', '',
                            random.choice(D8332), '1', 'NOTREMOVED', '[today+' + str(random.randint(1, 15))  +']', random.choice(D8335), 'METER_' + RANDOM_STRING, 'STOPPED', 'BACKWARD', 'SLOWED', '', random.randint(100, 9999), '[today-' + str(random.randint(1, 45))  +']', fake.paragraph(nb_sentences=1)
                            ]
        T352W_data_items = [# basic data
                            '[orid]', 'REPLACED', # random.choice(D8341), # when other option than REPLACED no NEW METER can be provided - CONSIDER RULE!
                            # meter data
                            METER_MNF, METER_SER, RANDOM_METER_MNF, RANDOM_METER_SER, '120', '[today]', '1', '12', '1', '5', '1', RANDOM_GISX, '1', RANDOM_GISY, '1', 'I', '1', RANDOM_METER_LOC,
                            '1', OUTR_RANDOM_GISX, '1', OUTR_RANDOM_GISY, '1', 'O', '1', RANDOM_OUTRE_LOC, 'UPDATED_METER_T352W',
                            ]
        T353R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '', '1', '[today]', 
                            # customer and retailer data
                            '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # install meter details
                            '1', RANDOM_STRING, RANDOM_STRING,  RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), random.randint(10, 30), random.choice(D8335), 'METER_' + RANDOM_STRING, random.choice(D8346), fake.paragraph(nb_sentences=1), fake.paragraph(nb_sentences=1)
                            ]
        T355R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '', '1', '[today]', 
                            # customer and retailer data
                            '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # request accuracy meter details
                            METER_MNF, METER_SER, '1', RANDOM_STRING, RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), '0', '', '1', 'NOTREMOVED', '[today+' + str(random.randint(1, 15))  +']', random.choice(D8335), 'METER_' + RANDOM_STRING, random.choice(D8348), fake.paragraph(nb_sentences=1), fake.paragraph(nb_sentences=1) 
                            ]
        T355W_data_items = [# basic data
                            SPID, '', '[today]', 
                            # request accuracy meter details
                            METER_MNF, METER_SER, '1', RANDOM_STRING, RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), '0', '', '1', 'NOTREMOVED', '[today+' + str(random.randint(1, 15))  +']', random.choice(D8335), 'METER_' + RANDOM_STRING, random.choice(D8348), fake.paragraph(nb_sentences=1), fake.paragraph(nb_sentences=1)
                            ]
        T356W_data_items = [# basic data
                            '[orid]',
                            #rAwaiting Meter Accuracy Test data
                            METER_MNF, METER_SER, random.choice(D8367), random.choice(D8368), '1', random.randint(100, 9999), random.randint(100, 9999), '[today-' + str(random.randint(1, 45))  +']', '1', '', fake.paragraph(nb_sentences=1)
                            ]
        T357W_data_items = [# basic data
                            '[orid]',
                            # rAwaiting Meter Accuracy Test data
                            METER_MNF, METER_SER, RANDOM_METER_MNF, RANDOM_METER_SER, random.randint(100, 9999), '[today-' + str(random.randint(1, 45))  +']', '1', random.randint(3, 10), '1', random.randint(2, 6), '1', RANDOM_GISX, '1', RANDOM_GISY, '1', random.choice(D3025), '1', RANDOM_METER_LOC, '1', OUTR_RANDOM_GISX, '1', OUTR_RANDOM_GISY, '1', random.choice(D3025), '1', RANDOM_OUTRE_LOC, fake.paragraph(nb_sentences=1)
                            ]
        T365R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '', '1', '[today]', 
                            # customer and retailer data
                            '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            RANDOM_STRING, random.choice(D2005), RANDOM_STRING, RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # Meter Change details
                            METER_MNF, METER_SER, '1', RANDOM_STRING, RANDOM_STRING,  RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), '0', '', random.choice(D8332), '1', 'NOTREMOVED', '[today+' + str(random.randint(1, 15))  +']', random.choice(D8326), random.randint(10, 30), random.choice(D8335), 'METER_' + RANDOM_STRING, random.choice(D8346), fake.paragraph(nb_sentences=1), fake.paragraph(nb_sentences=1)
                            ]
        T501R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), random.choice(D8356), RANDOM_STRING, random.choice(D8358), RANDOM_STRING,random.choice(D8360), RANDOM_STRING, '', '1', fake.paragraph(nb_sentences=1), '[today]', '1',
                            # customer and retailer data
                            CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            fake.paragraph(nb_sentences=1), random.choice(D2005), fake.paragraph(nb_sentences=1), RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            ]
        T501W_data_items = [# basic data
                            SPID, '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), random.choice(D8356), ''.join(random.choice(string.ascii_letters) for _ in range(15)), random.choice(D8358),''.join(random.choice(string.ascii_letters) for _ in range(15)),random.choice(D8360), ''.join(random.choice(string.ascii_letters) for _ in range(15)), '', fake.paragraph(nb_sentences=1), '[today]'      # [today - 0] = [today]!!!
                           ]
        T505R_data_items = [# basic data
                            SPID, 'RET_' + RANDOM_STRING, '[today-' + str(random.randint(0, 7))  +']', 'DWENQUIRY', random.choice(D8365), fake.enzyme(), '', '1', fake.paragraph(nb_sentences=1), '[today]', '1',       # [today - 0] = [today]!!!
                            # customer and retailer data
                            CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            fake.paragraph(nb_sentences=1), random.choice(D2005), fake.paragraph(nb_sentences=1), RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            ]
        T505W_data_items = [# basic data
                            SPID, '[today-' + str(random.randint(0, 7))  +']', 'DWENQUIRY',random.choice(D8365),  fake.enzyme(), '', fake.paragraph(nb_sentences=1),   '[today]', # [today - 0] = [today]!!!
                            ]
        T551R_data_items = [# basic data
                            SPID, 'DPID_' + RANDOM_STRING, 'RET_' + RANDOM_STRING, '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '', '1',  fake.paragraph(nb_sentences=1), '[today]', '1',    # [today - 0] = [today]!!!
                            # customer and retailer data
                            CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            fake.paragraph(nb_sentences=1), random.choice(D2005), fake.paragraph(nb_sentences=1), RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            ]
        T551W_data_items = [# basic data
                            SPID, 'DPID_' + RANDOM_STRING, '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '', fake.paragraph(nb_sentences=1), '[today]'      # [today - 0] = [today]!!!
                           ]
        T561R_data_items = [# basic data
                            SWG_SPID, 'DPID_' + RANDOM_STRING, 'RET_' + RANDOM_STRING, '', '1', random.choice(D8371), '[today+' + str(random.randint(0, 7))  +']', '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '[today+' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1),'[today]',
                            # customer and retailer data
                            '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            fake.paragraph(nb_sentences=1), random.choice(D2005), fake.paragraph(nb_sentences=1), RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # Group Attached Application
                            random.choice(D8374), random.choice(D8375), random.choice(D8376), random.choice(D8377), random.choice(D8378), random.choice(D8379), random.choice(D8384), random.choice(D8385), random.choice(D8386), random.choice(D8380), 'YES'
                            ]
        T561W_data_items = [# basic data
                            SWG_SPID, 'DPID_' + RANDOM_STRING, '', random.choice(D8371), '[today+' + str(random.randint(0, 7))  +']', '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '[today+' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1),'[today]',
                            # Group Attached Application
                            random.choice(D8374), random.choice(D8375), random.choice(D8376), random.choice(D8377), random.choice(D8378), random.choice(D8379), random.choice(D8384), random.choice(D8385), random.choice(D8386), random.choice(D8380), 'YES'
                            ]
        T562R_data_items = [# basic data
                            'MOSLTEST-W', 'DPID_' + RANDOM_STRING, 'RET_' + RANDOM_STRING, '1', '', 'MOSLTEST-W', 'MOSLTEST-W', 'SEC_' + RANDOM_STRING, 'PRI_' + RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), RANDOM_STRING, random.randint(1, 99999999), random.choice(D8371), '[today+' + str(random.randint(0, 7))  +']',  '[today-' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '[today+' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1),'[today]',
                            # customer and retailer data
                            '1', CUST_RANDOM_NAME, CUST_RANDOM_PHONE, '105', CUST_RANDOM_NAME2, CUST_RANDOM_PHONE2, '122', CUST_EMAIL, '1', 'EMAIL', random.choice(D8237),
                            fake.paragraph(nb_sentences=1), random.choice(D2005), fake.paragraph(nb_sentences=1), RET_RANDOM_NAME, RET_RANDOM_PHONE, '210', RET_RANDOM_NAME2, RET_RANDOM_PHONE2, '224', RET_EMAIL,
                            # Group Attached Application
                            random.choice(D8374), random.choice(D8375), random.choice(D8376), random.choice(D8377), random.choice(D8378), random.choice(D8379), random.choice(D8380), 'YES', random.choice(D8384), random.choice(D8385), random.choice(D8386)  #random.choice(D8381), - at least 1 Yes
                            ]
        T562W_data_items = [# basic data
                            'DPID_' + RANDOM_STRING, 'MOSLTEST-R', '', 'MOSLTEST-R', 'MOSLTEST-R', 'SEC_' + RANDOM_STRING, 'PRI_' + RANDOM_STRING, RANDOM_ADDRESS1, RANDOM_ADDRESS2, RANDOM_ADDRESS3, RANDOM_ADDRESS4, RANDOM_ADDRESS5, random.choice(POSTCODES), random.randint(1, 99999999), RANDOM_STRING, random.randint(1, 99999999), random.choice(D8371), '[today+' + str(random.randint(0, 7))  +']', '[today-' + str(random.randint(0, 7))  +']',fake.paragraph(nb_sentences=1), '[today+' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1), '[today]',
                            # Group Attached Application
                            random.choice(D8374), random.choice(D8375), random.choice(D8376), random.choice(D8377), random.choice(D8378), random.choice(D8379), random.choice(D8384), random.choice(D8385), random.choice(D8386), random.choice(D8380), 'YES' #random.choice(D8381), - at least 1 Yes
                            ]
        T563W_data_items = [# basic data
                            '[orid]', 'GRANTED', 'PERMANENT', '[today+' + str(random.randint(0, 7))  +']', fake.paragraph(nb_sentences=1)
                            ]
        T601R_data_items = [
                    # D2001 SPID
                    SWG_SPID, 
                    # D8464 Volumetric Adjustment Request Type
                    random.choice(D8464),
                    # D8465 Volumetric Adjustment Type
                    random.choice(D8465),
                    # D3013 Meter Manufacturer
                    SWG_METER_MNF,
                    # D3014 Manufacturer Meter Serial Number
                    SWG_METER_SER,
                    # D8466 Volumetric Adjustment Application Category
                    random.choice(D8466),
                    # D8467 Attachments Included
                    '0',
                    # D8468 Reason For No Attachments
                    fake.paragraph(nb_sentences=1),
                    # D8469 Eligibility Criteria Met
                    '0',
                    # D8470 Reason For Not Meeting Criteria
                    fake.paragraph(nb_sentences=1),
                    # D8323 Related Request ORID
                    '',
                    # D8213 Additional Information
                    fake.paragraph(nb_sentences=1),
                    # D8252 Customer Contact Required
                    '1',
                    # D8186 Retailer System Reference
                    'RET_' + RANDOM_STRING,
                    # D8193 Declaration Date
                    '[today]'
                    ### GROUP CUSTOMER (START) ###	
                    #D8019 Consent to Contact Customer
                    '1',
                    #D8020 Customer Contact Name 1
                    CUST_RANDOM_NAME,
                    #D8021 Customer Contact Number 1
                    CUST_RANDOM_PHONE,
                    #D8233 Customer Extension 1
                    '105',
                    #D8239 Customer Contact Name 2
                    CUST_RANDOM_NAME2,
                    #D8145 Customer Contact Number 2
                    CUST_RANDOM_PHONE2,
                    #D8234 Customer Extension 2
                    '122',
                    #D8146 Customer Contact Email
                    CUST_EMAIL,
                    #D8235 Customer Aware of Service Request
                    '1',
                    #D8236 Customer Preferred Method of Contact
                    'EMAIL',
                    #D8237 Customer Preferred Contact Time
                    random.choice(D8237),
                    #D8238 Customer Additional Information
                    fake.paragraph(nb_sentences=1),
                    #D2005 Customer Classification - Sensitive Customer
                    random.choice(D2005),
                    #D8240 Landlord Tenant Details
                    fake.paragraph(nb_sentences=1),
                    #D8269 Retailer Contact Name 1
                    RET_RANDOM_NAME,
                    #D8270 Retailer Contact Number 1
                    RET_RANDOM_PHONE,
                    #D8271 Retailer Extension 1
                    '210',
                    #D8280 Retailer Contact Name 2
                    RET_RANDOM_NAME2,
                    #D8272 Retailer Contact Number 2
                    RET_RANDOM_PHONE2,
                    #D8273 Retailer Extension 2
                    '224',
                    #D8274 Retailer Contact Email
                    RET_EMAIL,
                    ### GROUP CUSTOMER (END) ###	
                    ### GROUP FIREFIGHTING (START) ###		
                    #D8471 Type Of Charge
                    random.choice(D8471),
                    #D8472 Firefighting Volumetric Adjustment Reason
                    random.choice(D8472),
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '1024',
                    #D8491 Customer Sub Meter Fitted
                    '1',
                    #D8474 Before Event Meter Read
                    '150',
                    #D8475 Before Event Meter Read Date
                    '[today-7]',
                    #D8476 After Event Meter Read
                    '200',
                    #D8477 After Event Meter Read Date
                    '[today]',
                    ### GROUP FIREFIGHTING (END) ###	
                    ### GROUP LEAK (START) ###	
                    #D8478 Leak Volumetric Adjustment Reason
                    'LEAKPROPERTY',
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8479 Leak Details
                    'REPSUPPLYPIPE',
                    #D8480 Leak Details Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8481 Source Of Leak
                    'WHOLESALER',
                    #D8482 Leak Discharge Point
                    'GROUND',
                    #D8483 Cause Of Leak
                    'THIRDPARTY',
                    #D8484 Cause Of Leak Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '1024',
                    #D8486 First Meter Read
                    '155',
                    #D8487 First Meter Read Date
                    '[today-7]',
                    #D8488 Second Meter Read
                    '205',
                    #D8489 Second Meter Read Date
                    '[today]',
                    ### GROUP LEAK (END) ###
                    ### GROUP VOLUMEADJST (START) ###	 
                    #D8492 Volumetric Adjustment Type
                    'TYPE',
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '185',
                    #D8474 Before Event Meter Read
                    '150',
                    #D8475 Before Event Meter Read Date
                    '[today-7]',
                    #D8476 After Event Meter Read
                    '200',
                    #D8477 After Event Meter Read Date
                    '[today]',
                    ### GROUP VOLUMEADJST (END) ###
                    ### GROUP NONRTSCHANGE (START) ###		
                    #D8490 Reason No RTS
                    random.choice(D8490),
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8491 Customer Sub Meter Fitted
                    '1',
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D3007 Return to Sewer
                    '1',        
                    ### GROUP NONRTSCHANGE (END) ###
                    ### GROUP SWAREACHANGE (START) ###       
                    #D2012 Surface Area
                    '150',
                    #D8502 Sewerage System Connected Site Percentage
                    '55',
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',          
                    ### GROUP SWAREACHANGE (END) ###
                            ]
        T601W_data_items = [
                    # D2001 SPID
                    SWG_SPID, 
                    # D8464 Volumetric Adjustment Request Type
                    random.choice(D8464),
                    # D8465 Volumetric Adjustment Type
                    random.choice(D8465),
                    # D3013 Meter Manufacturer
                    SWG_METER_MNF,
                    # D3014 Manufacturer Meter Serial Number
                    SWG_METER_SER,
                    # D8466 Volumetric Adjustment Application Category
                    random.choice(D8466),
                    # D8467 Attachments Included
                    '0',
                    # D8468 Reason For No Attachments
                    fake.paragraph(nb_sentences=1),
                    # D8469 Eligibility Criteria Met
                    '0',
                    # D8470 Reason For Not Meeting Criteria
                    fake.paragraph(nb_sentences=1),
                    # D8323 Related Request ORID
                    '',
                    # D8213 Additional Information
                    fake.paragraph(nb_sentences=1),
                    # D8252 Customer Contact Required
                    '1',
                    # D8186 Retailer System Reference
                    'RET_' + RANDOM_STRING,
                    # D8193 Declaration Date
                    '[today]'
                    ### GROUP FIREFIGHTING (START) ###		
                    #D8471 Type Of Charge
                    random.choice(D8471),
                    #D8472 Firefighting Volumetric Adjustment Reason
                    random.choice(D8472),
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '1024',
                    #D8491 Customer Sub Meter Fitted
                    '1',
                    #D8474 Before Event Meter Read
                    '150',
                    #D8475 Before Event Meter Read Date
                    '[today-7]',
                    #D8476 After Event Meter Read
                    '200',
                    #D8477 After Event Meter Read Date
                    '[today]',
                    ### GROUP FIREFIGHTING (END) ###	
                    ### GROUP LEAK (START) ###	
                    #D8478 Leak Volumetric Adjustment Reason
                    'LEAKPROPERTY',
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8479 Leak Details
                    'REPSUPPLYPIPE',
                    #D8480 Leak Details Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8481 Source Of Leak
                    'WHOLESALER',
                    #D8482 Leak Discharge Point
                    'GROUND',
                    #D8483 Cause Of Leak
                    'THIRDPARTY',
                    #D8484 Cause Of Leak Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '1024',
                    #D8486 First Meter Read
                    '155',
                    #D8487 First Meter Read Date
                    '[today-7]',
                    #D8488 Second Meter Read
                    '205',
                    #D8489 Second Meter Read Date
                    '[today]',
                    ### GROUP LEAK (END) ###
                    ### GROUP VOLUMEADJST (START) ###	 
                    #D8492 Volumetric Adjustment Type
                    'TYPE',
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D2047 Adjustment Volume
                    '185',
                    #D8474 Before Event Meter Read
                    '150',
                    #D8475 Before Event Meter Read Date
                    '[today-7]',
                    #D8476 After Event Meter Read
                    '200',
                    #D8477 After Event Meter Read Date
                    '[today]',
                    ### GROUP VOLUMEADJST (END) ###
                    ### GROUP NONRTSCHANGE (START) ###		
                    #D8490 Reason No RTS
                    random.choice(D8490),
                    #D8473 Volumetric Adjustment Reason Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8491 Customer Sub Meter Fitted
                    '1',
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',
                    #D3007 Return to Sewer
                    '1',        
                    ### GROUP NONRTSCHANGE (END) ###
                    ### GROUP SWAREACHANGE (START) ###       
                    #D2012 Surface Area
                    '150',
                    #D8502 Sewerage System Connected Site Percentage
                    '55',
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',          
                    ### GROUP SWAREACHANGE (END) ###	 
                    ]
        T602W_data_items = [
                    #D8221 ORID
                    '[orid]',
                    #D8495 Volumetric Adjustment Complete Code
                    'AWARDNOAMEND',
                    #D8496 Volumetric Adjustment Additional Info
                    fake.paragraph(nb_sentences=1),
                    #D8464 Volumetric Adjustment Request Type
                    random.choice(D8464),
                    #D8465 Volumetric Adjustment Type
                    random.choice(D8465),
                    #D8466 Volumetric Adjustment Application Category
                    random.choice(D8466),
                    #D8497 Volumetric Adjustment Unit
                    random.choice(D8497),
                    #D8498 Volumetric Adjustment Awarded
                    '1',
                    #D8499 Tariff Band Amendment
                    '1',
                    #D8500 Amount of Out Of CMOS Allowance
                    '125',
                    #D4006 Effective From Date
                    '[today]',
                    #D4024 Effective To Date
                    '[today+7]',  
                    #D8501 Volumetric Adjustment Review Date
                    '[today]',
                    #D8467 Attachments Included
                    '0',
                    #D8468 Reason For No Attachments
                    fake.paragraph(nb_sentences=1),
                    #D8051 Charge to Retailer Flag
                    '1',
                    #D8410 Charge To Retailer Reason
                    fake.paragraph(nb_sentences=1),
                    #D8213 Additional information
                    fake.paragraph(nb_sentences=1)
                    ]
        
        TEST_CASE_LENGTH = len(test_case_sequence)
        #gererate test case sequence in Excel file       
        for i in range(TEST_CASE_LENGTH):
            # build file name based on transactions chain. i.e. T321R_T201W_T322W....
            new_filename = new_filename + test_case_sequence[i] + '_'
            # if transaction has .R in the name, it is MOSLTEST-R as requestor
            # put the transaction Source Org ID in sheet Test Case Sequence, column C - Source ID
            ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=5).value = test_case_sequence[i]
            if test_case_sequence[i][-1] == 'R':
                ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=3).value = RETAILER
            else:
                ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=3).value = WHOLESALER
            #set background color if the transaction ius submitting transaction i.e. T321.R
            if ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=5).value in SUBMITTING_TRANSACTIONS:
                for col_range in range(3, 6):
                        cell_title = ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=col_range)
                        cell_title.fill = PatternFill(start_color="E5E500", end_color="E5E500", fill_type="solid")
                cell_title2 = ws11.cell(row=i+4+(a*TEST_CASE_LENGTH), column=7)
                cell_title2.fill = PatternFill(start_color="E5E500", end_color="E5E500", fill_type="solid")
            # then in second sheet 'Test case data' depending on the transaction, insert respctive data items
            match test_case_sequence[i]:
                case 'T201.W':
                    for k in range(len(T201W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T201W_data_items[k]
                case 'T202.W':
                    for k in range(len(T202W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T202W_data_items[k]
                case 'T203.W':
                    for k in range(len(T203W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T203W_data_items[k]
                case 'T204.R':
                    for k in range(len(T204R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T204R_data_items[k]
                case 'T205.W':
                    for k in range(len(T205W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T205W_data_items[k]
                case 'T206.W':
                    for k in range(len(T206W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T206W_data_items[k]
                case 'T207.R':
                    for k in range(len(T207R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T207R_data_items[k]
                case 'T207.W':
                    for k in range(len(T207W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T207W_data_items[k]
                case 'T208.R':
                    for k in range(len(T208R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T208R_data_items[k]
                case 'T210.R':
                    for k in range(len(T210R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T210R_data_items[k]
                case 'T211.R':
                    for k in range(len(T211R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T211R_data_items[k]
                case 'T211.W':
                    for k in range(len(T211W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T211W_data_items[k]
                case 'T212.W':
                    for k in range(len(T212W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T212W_data_items[k]
                case 'T213.W':
                    for k in range(len(T213W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T213W_data_items[k]
                case 'T214.W':
                    for k in range(len(T214W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T214W_data_items[k]
                case 'T215.R':
                    for k in range(len(T215R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T215R_data_items[k]
                case 'T215.W':
                    for k in range(len(T215W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T215W_data_items[k]
                case 'T216.R':
                    for k in range(len(T216R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T216R_data_items[k]
                case 'T216.W':
                    for k in range(len(T216W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T216W_data_items[k]
                case 'T217.W':
                    for k in range(len(T217W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T217W_data_items[k]
                case 'T218.R':
                    for k in range(len(T218R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T218R_data_items[k]
                case 'T220.W':
                    for k in range(len(T220W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T220W_data_items[k]
                case 'T222.W':
                    for k in range(len(T222W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T222W_data_items[k]
                case 'T221.R':
                    for k in range(len(T221R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T221R_data_items[k]
                case 'T223.W':
                    for k in range(len(T223W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T223W_data_items[k]
                case 'T224.W':
                    for k in range(len(T224W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T224W_data_items[k]
                case 'T225.R':
                    for k in range(len(T225R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T225R_data_items[k]
                case 'T226.W':
                    for k in range(len(T226W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T226W_data_items[k]
                case 'T227.R':
                    for k in range(len(T227R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T227R_data_items[k]
                case 'T228.R':
                    for k in range(len(T228R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T228R_data_items[k]
                case 'T321.R':
                    #coloring header cells to distinguish data blocks
                    #SPID 6
                    for col_range in range(7, 13):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #CUSTOMER BLOCK 21        
                    for col_range in range(13, 34):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D6EAF8", end_color="D6EAF8", fill_type="solid")     
                    #EXISTING METER1 33                   
                    for col_range in range(34, 67):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #EXISTING METER2 33       
                    for col_range in range(67, 100):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #MISSING METER1 2   
                    for col_range in range(100, 102):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D1F2EB", end_color="D1F2EB", fill_type="solid")
                    #MISSING METER2 2   
                    for col_range in range(102, 104):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #UNMEASURED 36   
                    for col_range in range(104, 140):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="99A3A4", end_color="99A3A4", fill_type="solid")
                    for k in range(len(T321R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T321R_data_items[k]
                case 'T321.W':
                    #coloring header cells to distinguish data blocks
                    #SPID 6
                    for col_range in range(7, 11):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #EXISTING METER1 33                   
                    for col_range in range(11, 44):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #EXISTING METER2 33       
                    for col_range in range(44, 77):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #MISSING METER1 2   
                    for col_range in range(77, 79):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D1F2EB", end_color="D1F2EB", fill_type="solid")
                    #MISSING METER2 2   
                    for col_range in range(79, 81):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #UNMEASURED 36   
                    for col_range in range(81, 117):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="99A3A4", end_color="99A3A4", fill_type="solid")
                    for k in range(len(T321W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T321W_data_items[k]
                case 'T322.W':
                    #coloring header cells to distinguish data blocks
                    #SPID 6
                    for col_range in range(7, 9):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #EXISTING METER1 28                   
                    for col_range in range(9, 37):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #EXISTING METER2 28       
                    for col_range in range(37, 65):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #MISSING METER1 3   
                    for col_range in range(65, 68):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D1F2EB", end_color="D1F2EB", fill_type="solid")
                    #MISSING METER2 3   
                    for col_range in range(68, 71):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #UNMEASURED 27   
                    for col_range in range(71, 98):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="99A3A4", end_color="99A3A4", fill_type="solid")
                    for k in range(len(T322W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T322W_data_items[k]                              
                case 'T323.W':
                    for k in range(len(T323W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T323W_data_items[k]
                case 'T324.R':
                    for k in range(len(T324R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T324R_data_items[k]
                case 'T325.R':
                    for k in range(len(T325R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T325R_data_items[k]
                case 'T331.W':             
                    for k in range(len(T331W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T331W_data_items[k]
                case 'T332.W':
                    for k in range(len(T332W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T332W_data_items[k]
                case 'T335.R':
                    #coloring header cells to distinguish data blocks
                    #SPID 33
                    for col_range in range(7, 40):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #CUSTOMER BLOCK 21        
                    for col_range in range(40, 61):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D6EAF8", end_color="D6EAF8", fill_type="solid")                    
                    #POTENTIAL METER1 11                   
                    for col_range in range(61, 72):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")   
                    #POTENTIAL METER2 11                   
                    for col_range in range(72, 83):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")   
                    for k in range(len(T335R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T335R_data_items[k]
                case 'T336.W':
                    #coloring header cells to distinguish data blocks
                    #SPID 13
                    for col_range in range(7, 20):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #GS DETAILS         
                    for col_range in range(20, 49):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D6EAF8", end_color="D6EAF8", fill_type="solid")   
                    #POTENTIAL METER1 11                   
                    for col_range in range(49, 60):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")   
                    #POTENTIAL METER2 11                   
                    for col_range in range(60, 71):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")     
                    for k in range(len(T336W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T336W_data_items[k]
                case 'T341.R':
                    #coloring header cells to distinguish data blocks
                    #SPID
                    for col_range in range(7, 11):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #IMPACTED METERS         
                    for col_range in range(11, 15):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D6EAF8", end_color="D6EAF8", fill_type="solid")     
                    #ADDITIONAL METERS                   
                    for col_range in range(15, 17):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #REMOVE SC      
                    for col_range in range(17, 28):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #PAIRED SPID IMPACTED   
                    for col_range in range(28, 30):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D1F2EB", end_color="D1F2EB", fill_type="solid")
                    #REMOVE OTHER SPID SC   
                    for col_range in range(30, 41):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #OTHER DETAILS        
                    for col_range in range(41, 51):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EBDEF0", end_color="EBDEF0", fill_type="solid")
                    #CUSTOMER DETAILS          
                    for col_range in range(51, 72):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="AED6F1", end_color="AED6F1", fill_type="solid")
                    #DEMOLISHED    
                    for col_range in range(72, 73):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="ABB2B9", end_color="ABB2B9", fill_type="solid")
                    #MERGED   
                    for col_range in range(73, 90):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A9DFBF", end_color="A9DFBF", fill_type="solid")
                    #NOSC  
                    for col_range in range(90, 91):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="ABB2B9", end_color="ABB2B9", fill_type="solid")
                    #LANDORD  
                    for col_range in range(91, 107):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="AED6F1", end_color="AED6F1", fill_type="solid")
                    #NOTELEIGIBLE   
                    for col_range in range(107, 108):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="B2BABB", end_color="B2BABB", fill_type="solid")
                    #DUPLICATE  
                    for col_range in range(108, 109):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="F0B27A", end_color="F0B27A", fill_type="solid")         
                    for k in range(len(T341R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T341R_data_items[k]
                case 'T341.W':
                    #coloring header cells to distinguish data blocks
                    #SPID
                    for col_range in range(7, 11):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #IMPACTED METERS         
                    for col_range in range(11, 15):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D6EAF8", end_color="D6EAF8", fill_type="solid")     
                    #ADDITIONAL METERS                   
                    for col_range in range(15, 17):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    #REMOVE SC      
                    for col_range in range(17, 28):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #PAIRED SPID IMPACTED   
                    for col_range in range(28, 30):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="D1F2EB", end_color="D1F2EB", fill_type="solid")
                    #REMOVE OTHER SPID SC   
                    for col_range in range(30, 41):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EDBB99", end_color="EDBB99", fill_type="solid")
                    #OTHER DETAILS        
                    for col_range in range(41, 49):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="EBDEF0", end_color="EBDEF0", fill_type="solid")
                    #DEMOLISHED    
                    for col_range in range(49, 50):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="ABB2B9", end_color="ABB2B9", fill_type="solid")
                    #MERGED   
                    for col_range in range(50, 67):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A9DFBF", end_color="A9DFBF", fill_type="solid")
                    #NOSC  
                    for col_range in range(67, 68):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="ABB2B9", end_color="ABB2B9", fill_type="solid")
                    #LANDORD  
                    for col_range in range(68, 84):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="AED6F1", end_color="AED6F1", fill_type="solid")
                    #NOTELEIGIBLE   
                    for col_range in range(84, 85):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="B2BABB", end_color="B2BABB", fill_type="solid")
                    #DUPLICATE  
                    for col_range in range(85, 86):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="F0B27A", end_color="F0B27A", fill_type="solid")   
                    for k in range(len(T341W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T341W_data_items[k]
                case 'T342.W':
                    for k in range(len(T342W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T342W_data_items[k]
                case 'T351.R':
                    #coloring header cells to distinguish data blocks
                    #SPID 5
                    for col_range in range(7, 12):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #CUSTOMER DETAILS 21          
                    for col_range in range(12, 33):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="AED6F1", end_color="AED6F1", fill_type="solid")
                    #SELECTED METER 27                  
                    for col_range in range(33, 60):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    for k in range(len(T351R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T351R_data_items[k]
                case 'T351.W':
                    for k in range(len(T351W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T351W_data_items[k]
                case 'T352.W':
                    for k in range(len(T352W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T352W_data_items[k]
                case 'T353.R':
                    for k in range(len(T353R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T353R_data_items[k]
                case 'T355.R':
                    #coloring header cells to distinguish data blocks
                    #SPID 5
                    for col_range in range(7, 12):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #CUSTOMER DETAILS 21          
                    for col_range in range(12, 33):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="AED6F1", end_color="AED6F1", fill_type="solid")
                    #SELECTED METER 22                  
                    for col_range in range(33, 55):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    for k in range(len(T355R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T355R_data_items[k]
                case 'T355.W':
                    #coloring header cells to distinguish data blocks
                    #SPID 3
                    for col_range in range(7, 10):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="A3E4D7", end_color="A3E4D7", fill_type="solid")
                    #SELECTED METER 22                  
                    for col_range in range(10, 32):
                        cell_title = ws12.cell(4+(3*i)+(3*a*TEST_CASE_LENGTH), col_range)
                        cell_title.fill = PatternFill(start_color="FCF3CF", end_color="FCF3CF", fill_type="solid")
                    for k in range(len(T355W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T355W_data_items[k]
                case 'T356.W':
                    for k in range(len(T356W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T356W_data_items[k]
                case 'T357.W':
                    for k in range(len(T357W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T357W_data_items[k]
                case 'T365.R':
                    for k in range(len(T365R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T365R_data_items[k]
                case 'T501.R':
                    for k in range(len(T501R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T501R_data_items[k]
                case 'T501.W':
                    for k in range(len(T501W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T501W_data_items[k]
                case 'T505.R':
                    for k in range(len(T505R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T505R_data_items[k]
                case 'T505.W':
                    for k in range(len(T505W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T505W_data_items[k]
                case 'T551.R':
                    for k in range(len(T551R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T551R_data_items[k]
                case 'T551.W':
                    for k in range(len(T551W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T551W_data_items[k]
                case 'T561.R':
                    for k in range(len(T561R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T561R_data_items[k]
                case 'T561.W':
                    for k in range(len(T561W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T561W_data_items[k]
                case 'T562.R':
                    for k in range(len(T562R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T562R_data_items[k]
                case 'T562.W':
                    for k in range(len(T562W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T562W_data_items[k]
                case 'T563.W':
                    for k in range(len(T563W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T563W_data_items[k]
                case 'T601.R':
                    for k in range(len(T601R_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T601R_data_items[k]
                case 'T601.W':
                    for k in range(len(T601W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T601W_data_items[k]
                case 'T602.W':
                    for k in range(len(T602W_data_items)):
                        ws12.cell(row=6+(3*i)+(3*a*TEST_CASE_LENGTH), column=k +
                                7).value = T602W_data_items[k]

    
    test_cases_folder = working_dir + 'TEST_CASES'
    if not os.path.exists(test_cases_folder):
        os.makedirs(test_cases_folder)

    if len(test_case_sequence) > 10:
        new_filename = "RECENT_TESTCASE"
    else:    
        new_filename = '_'.join(test_case_sequence)

    wb1.save(filename = test_cases_folder + '\\' + new_filename.replace('.','') + '.xlsx')

# loop_times repeats test case sequence in the excel file
# max_loop = int (100/TEST_CASE_LENGTH)
max_loop = 1
generate_test_case(max_loop)